#!/usr/bin/env python3
"""
AI Content Generation Engine - Thai Display Fixed
‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢‡πÅ‡∏•‡πâ‡∏ß
"""

import sys
import os
import locale

# ===============================
# Thai Display Fixes
# ===============================

def setup_thai_display():
    """‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢"""
    try:
        # Fix 1: Console Code Page
        if sys.platform.startswith('win'):
            os.system('chcp 65001 > nul 2>&1')
        
        # Fix 2: Environment Variables  
        os.environ['PYTHONIOENCODING'] = 'utf-8'
        os.environ['PYTHONUTF8'] = '1'
        
        # Fix 3: Locale
        try:
            if sys.platform.startswith('win'):
                locale.setlocale(locale.LC_ALL, 'C.UTF-8')
            else:
                locale.setlocale(locale.LC_ALL, 'th_TH.UTF-8')
        except:
            pass  # ‡πÑ‡∏°‡πà‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏ñ‡πâ‡∏≤‡∏ï‡∏±‡πâ‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ
            
        # Fix 4: Stdout/Stderr encoding
        if hasattr(sys.stdout, 'reconfigure'):
            sys.stdout.reconfigure(encoding='utf-8')
            sys.stderr.reconfigure(encoding='utf-8')
        
        return True
        
    except Exception as e:
        print(f"Warning: Thai display setup failed: {e}")
        return False

# ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°
setup_thai_display()

# ===============================
# Original Code (Updated)  
# ===============================

import asyncio
import json
import logging
from datetime import datetime
from typing import Dict, List, Optional

# Setup logging with UTF-8
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler(sys.stdout)
    ]
)
logger = logging.getLogger(__name__)

# Safe print function
def safe_print(text, **kwargs):
    """Print ‡∏ó‡∏µ‡πà‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢"""
    try:
        print(text, **kwargs)
    except UnicodeEncodeError:
        # Fallback: ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô ASCII ‡∏ñ‡πâ‡∏≤‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
        text_safe = text.encode('ascii', 'ignore').decode('ascii')
        print(text_safe, **kwargs)
    except Exception as e:
        print(f"Print error: {e}", **kwargs)

class ThaiSafeContentEngine:
    """Content Engine ‡∏ó‡∏µ‡πà‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢"""
    
    def __init__(self):
        """Initialize engine with Thai support"""
        self.session_stats = {
            "generated": 0,
            "total_cost": 0.0,
            "total_time": 0.0,
            "success_rate": 100.0
        }
        
        safe_print("üîß ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏£‡∏∞‡∏ö‡∏ö...")
        safe_print("‚úÖ ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢‡πÅ‡∏•‡πâ‡∏ß!")
        
    async def generate_complete_content(self, request: Dict) -> Dict:
        """‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏†‡∏≤‡§∑‡∏≤‡πÑ‡∏ó‡∏¢"""
        
        start_time = datetime.now()
        
        safe_print(f"üé¨ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤: {request.get('topic', '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏')}")
        safe_print(f"   ‡πÅ‡∏û‡∏•‡∏ï‡∏ü‡∏≠‡∏£‡πå‡∏°: {request.get('platform', 'youtube').upper()}")
        safe_print(f"   ‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û: {request.get('quality', 'budget').upper()}")
        
        try:
            # ‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•
            import random
            await asyncio.sleep(random.uniform(2, 5))
            
            generation_time = random.uniform(10, 30)
            cost = random.uniform(1.5, 8.0)
            
            # ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥
            self.session_stats["generated"] += 1
            self.session_stats["total_cost"] += cost
            self.session_stats["total_time"] += generation_time
            
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå (‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢)
            result = {
                "success": True,
                "generation_time_seconds": round(generation_time, 1),
                "script": {
                    "title_suggestions": [
                        f"{request['topic']}: ‡∏™‡∏¥‡πà‡∏á‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏£‡∏π‡πâ 2025",
                        f"‡πÄ‡∏à‡∏≤‡∏∞‡∏•‡∏∂‡∏Å {request['topic']} ‡πÅ‡∏ö‡∏ö‡∏á‡πà‡∏≤‡∏¢‡πÜ",
                        f"{request['topic']}: ‡∏°‡∏∏‡∏°‡∏°‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà"
                    ],
                    "hook": f"‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏Ñ‡∏£‡∏±‡∏ö! ‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡πÄ‡∏£‡∏≤‡∏à‡∏∞‡∏°‡∏≤‡∏Ñ‡∏∏‡∏¢‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á {request['topic']} ‡∏Å‡∏±‡∏ô",
                    "introduction": f"‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á {request['topic']} ‡∏ô‡∏µ‡πâ‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏°‡∏≤‡∏Å ‡πÄ‡∏û‡∏£‡∏≤‡∏∞ {request['angle']}",
                    "main_content": f"""
‡∏õ‡∏£‡∏∞‡πÄ‡∏î‡πá‡∏ô‡πÅ‡∏£‡∏Å: {request['topic']} ‡∏Ñ‡∏∑‡∏≠‡∏≠‡∏∞‡πÑ‡∏£ ‡πÅ‡∏•‡∏∞‡∏ó‡∏≥‡πÑ‡∏°‡∏ñ‡∏∂‡∏á‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç
‡∏õ‡∏£‡∏∞‡πÄ‡∏î‡πá‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏≠‡∏á: {request['angle']} - ‡∏°‡∏∏‡∏°‡∏°‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏ô‡πà‡∏≤‡∏™‡∏ô‡πÉ‡∏à  
‡∏õ‡∏£‡∏∞‡πÄ‡∏î‡πá‡∏ô‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢: ‡∏Å‡∏≤‡∏£‡∏ô‡∏≥‡πÑ‡∏õ‡∏õ‡∏£‡∏∞‡∏¢‡∏∏‡∏Å‡∏ï‡πå‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï‡∏à‡∏£‡∏¥‡∏á
                    """.strip(),
                    "conclusion": f"‡∏™‡∏£‡∏∏‡∏õ‡πÅ‡∏•‡πâ‡∏ß {request['topic']} ‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏≤‡∏Ñ‡∏ß‡∏£‡πÉ‡∏´‡πâ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏ô‡πÉ‡∏à",
                    "call_to_action": "‡∏≠‡∏¢‡πà‡∏≤‡∏•‡∏∑‡∏°‡∏Å‡∏î Like Subscribe ‡πÅ‡∏•‡∏∞‡∏Å‡∏î‡∏Å‡∏£‡∏∞‡∏î‡∏¥‡πà‡∏á‡∏ô‡∏∞‡∏Ñ‡∏£‡∏±‡∏ö",
                    "hashtags": [f"#{request['topic'].replace(' ', '')}", "#viral", "#trending"],
                    "estimated_duration": f"{request.get('duration', 5)}-{request.get('duration', 5)+2} ‡∏ô‡∏≤‡∏ó‡∏µ",
                    "thumbnail_concept": f"‡πÉ‡∏™‡πà‡∏£‡∏π‡∏õ {request['topic']} ‡∏ó‡∏µ‡πà‡∏î‡∏∂‡∏á‡∏î‡∏π‡∏î‡∏™‡∏≤‡∏¢‡∏ï‡∏≤"
                },
                "cost_estimate": {
                    "total_cost_baht": round(cost, 2),
                    "quality_score": round(random.uniform(7, 9.5), 1),
                    "estimated_views": random.randint(5000, 50000),
                    "estimated_roi": random.randint(300, 2000)
                },
                "session_stats": self.session_stats.copy()
            }
            
            safe_print(f"‚úÖ ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô! ‡πÄ‡∏ß‡∏•‡∏≤: {generation_time:.1f} ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ")
            return result
            
        except Exception as e:
            safe_print(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {str(e)}")
            return {
                "success": False,
                "error": str(e),
                "generation_time_seconds": (datetime.now() - start_time).total_seconds()
            }

class ThaiSafeInterface:
    """‡∏≠‡∏¥‡∏ô‡πÄ‡∏ó‡∏≠‡∏£‡πå‡πÄ‡∏ü‡∏ã‡∏ó‡∏µ‡πà‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢"""
    
    def __init__(self):
        self.engine = ThaiSafeContentEngine()
        
    def display_welcome(self):
        """‡πÅ‡∏™‡∏î‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö"""
        safe_print("")
        safe_print("="*70)
        safe_print("üé¨ AI CONTENT GENERATION ENGINE - THAI SUPPORT")  
        safe_print("="*70)
        safe_print("üöÄ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤ viral ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Social Media ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥!")
        safe_print("")
        safe_print("üí° ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡πÅ‡∏û‡∏•‡∏ï‡∏ü‡∏≠‡∏£‡πå‡∏°: YouTube, TikTok, Instagram, Facebook")
        safe_print("üéØ ‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û: Budget (‡∏õ‡∏£‡∏∞‡∏´‡∏¢‡∏±‡∏î), Standard, Premium")
        safe_print("ü§ñ AI: ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢‡πÄ‡∏ï‡πá‡∏°‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö")
        safe_print("")
        safe_print("üí∞ ‡∏ï‡πâ‡∏ô‡∏ó‡∏∏‡∏ô: 1-5 ‡∏ö‡∏≤‡∏ó/‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠ (‡∏õ‡∏£‡∏∞‡∏´‡∏¢‡∏±‡∏î 99%!)")
        safe_print("‚è±Ô∏è  ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß: 10-60 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ/‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠")
        safe_print("="*70)
        
    def get_user_input(self) -> Dict:
        """‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ"""
        safe_print("")
        safe_print("üìù ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡πÉ‡∏´‡∏°‡πà")
        safe_print("-" * 30)
        
        # ‡∏£‡∏±‡∏ö‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠
        safe_print("üéØ ‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤:")
        safe_print("   ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á: 'AI ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤', '‡∏•‡∏á‡∏ó‡∏∏‡∏ô Crypto', '‡∏ó‡∏≥‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏á‡πà‡∏≤‡∏¢‡πÜ'")
        topic = input("üìç ‡πÉ‡∏™‡πà‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠: ").strip()
        
        if not topic:
            topic = "‡πÄ‡∏ó‡∏£‡∏ô‡∏î‡πå‡∏ô‡πà‡∏≤‡∏™‡∏ô‡πÉ‡∏à"
            safe_print(f"   ‚Üí ‡πÉ‡∏ä‡πâ‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô: {topic}")
        
        # ‡∏£‡∏±‡∏ö‡∏°‡∏∏‡∏°‡∏°‡∏≠‡∏á  
        safe_print(f"\nüí° ‡∏°‡∏∏‡∏°‡∏°‡∏≠‡∏á‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤:")
        safe_print("   ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á: '‡∏ß‡∏¥‡∏ò‡∏µ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏°‡∏∑‡∏≠‡πÉ‡∏´‡∏°‡πà', '‡πÄ‡∏Ñ‡∏•‡πá‡∏î‡∏•‡∏±‡∏ö‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÉ‡∏Ñ‡∏£‡∏ö‡∏≠‡∏Å'")
        angle = input("üìç ‡πÉ‡∏™‡πà‡∏°‡∏∏‡∏°‡∏°‡∏≠‡∏á: ").strip()
        
        if not angle:
            angle = f"‡∏™‡∏¥‡πà‡∏á‡∏ó‡∏µ‡πà‡∏Ñ‡∏ß‡∏£‡∏£‡∏π‡πâ‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö {topic}"
            safe_print(f"   ‚Üí ‡πÉ‡∏ä‡πâ‡∏°‡∏∏‡∏°‡∏°‡∏≠‡∏á‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô: {angle}")
        
        # ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÅ‡∏û‡∏•‡∏ï‡∏ü‡∏≠‡∏£‡πå‡∏°
        safe_print(f"\nüì± ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÅ‡∏û‡∏•‡∏ï‡∏ü‡∏≠‡∏£‡πå‡∏°:")
        platforms = {
            "1": ("youtube", "YouTube - ‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠‡∏¢‡∏≤‡∏ß (5-15 ‡∏ô‡∏≤‡∏ó‡∏µ)"),
            "2": ("tiktok", "TikTok - ‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠‡∏™‡∏±‡πâ‡∏ô (30-90 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ)"), 
            "3": ("instagram", "Instagram - ‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏£‡∏≤‡∏ß (30-120 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ)"),
            "4": ("facebook", "Facebook - ‡πÅ‡∏ä‡∏£‡πå‡πÑ‡∏î‡πâ (2-8 ‡∏ô‡∏≤‡∏ó‡∏µ)")
        }
        
        for key, (platform, description) in platforms.items():
            safe_print(f"   {key}. {description}")
        
        platform_choice = input("üìç ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÅ‡∏û‡∏•‡∏ï‡∏ü‡∏≠‡∏£‡πå‡∏° (1-4): ").strip()
        platform, platform_desc = platforms.get(platform_choice, ("youtube", "YouTube"))
        safe_print(f"   ‚Üí ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å: {platform_desc}")
        
        return {
            "topic": topic,
            "angle": angle,
            "platform": platform,
            "quality": "budget",
            "duration": 5
        }
    
    def display_result(self, result: Dict):
        """‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå"""
        safe_print("")
        safe_print("="*60)
        
        if result["success"]:
            script = result["script"]
            cost = result["cost_estimate"]
            
            safe_print("üéâ ‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!")
            safe_print("="*60)
            
            # ‡∏ï‡∏±‡∏ß‡∏ä‡∏µ‡πâ‡∏ß‡∏±‡∏î
            safe_print(f"‚è±Ô∏è  ‡πÄ‡∏ß‡∏•‡∏≤‡∏™‡∏£‡πâ‡∏≤‡∏á: {result['generation_time_seconds']:.1f} ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ")
            safe_print(f"üí∞ ‡∏ï‡πâ‡∏ô‡∏ó‡∏∏‡∏ô‡∏£‡∏ß‡∏°: ‡∏ø{cost['total_cost_baht']}")
            safe_print(f"üíé ‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û: {cost['quality_score']}/10")
            safe_print(f"üìà ROI ‡∏Ñ‡∏≤‡∏î‡∏Å‡∏≤‡∏£‡∏ì‡πå: {cost['estimated_roi']}%")
            
            # ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤
            safe_print(f"\nüìù ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤:")
            safe_print("-" * 40)
            safe_print(f"üé¨ ‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á: {script['title_suggestions'][0]}")
            safe_print(f"‚ö° Hook: {script['hook'][:100]}...")
            safe_print(f"üè∑Ô∏è  Hashtags: {' '.join(script['hashtags'][:5])}")
            
            # ‡∏ñ‡∏≤‡∏°‡∏ß‡πà‡∏≤‡∏à‡∏∞‡∏î‡∏π‡πÅ‡∏ö‡∏ö‡πÄ‡∏ï‡πá‡∏°‡πÑ‡∏´‡∏°
            safe_print(f"\nüí° ‡∏î‡∏π‡∏™‡∏Ñ‡∏£‡∏¥‡∏õ‡∏ï‡πå‡πÄ‡∏ï‡πá‡∏°? (y/n): ", end="")
            show_full = input().strip().lower()
            
            if show_full in ['y', 'yes', '‡πÉ‡∏ä‡πà']:
                self.display_full_script(script)
                
        else:
            safe_print("‚ùå ‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß!")
            safe_print("="*40)
            safe_print(f"üö´ ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {result['error']}")
    
    def display_full_script(self, script: Dict):
        """‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏Ñ‡∏£‡∏¥‡∏õ‡∏ï‡πå‡πÄ‡∏ï‡πá‡∏°"""
        safe_print(f"\nüìú ‡∏™‡∏Ñ‡∏£‡∏¥‡∏õ‡∏ï‡πå‡πÄ‡∏ï‡πá‡∏°:")
        safe_print("="*50)
        
        safe_print(f"\nüé¨ ‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥:")
        for i, title in enumerate(script['title_suggestions'], 1):
            safe_print(f"   {i}. {title}")
        
        safe_print(f"\n‚ö° Hook:")
        safe_print(f"   {script['hook']}")
        
        safe_print(f"\nüéØ Introduction:")
        safe_print(f"   {script['introduction']}")
        
        safe_print(f"\nüìã ‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏´‡∏•‡∏±‡∏Å:")
        for line in script['main_content'].split('\n'):
            if line.strip():
                safe_print(f"   {line.strip()}")
        
        safe_print(f"\nüé≠ Conclusion:")
        safe_print(f"   {script['conclusion']}")
        
        safe_print(f"\nüì¢ Call to Action:")
        safe_print(f"   {script['call_to_action']}")
        
        safe_print(f"\nüè∑Ô∏è  Hashtags:")
        safe_print(f"   {' '.join(script['hashtags'])}")
    
    async def run_interactive_mode(self):
        """‡∏£‡∏±‡∏ô‡πÇ‡∏´‡∏°‡∏î‡πÇ‡∏ï‡πâ‡∏ï‡∏≠‡∏ö"""
        self.display_welcome()
        
        while True:
            try:
                # ‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
                request = self.get_user_input()
                
                safe_print(f"\nüöÄ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤...")
                safe_print("‚è≥ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏≠‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà...")
                
                # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤
                result = await self.engine.generate_complete_content(request)
                
                # ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
                self.display_result(result)
                
                # ‡∏ñ‡∏≤‡∏°‡∏à‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡πà‡∏≠‡πÑ‡∏´‡∏°
                safe_print(f"\n" + "="*50)
                next_action = input("üéØ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏≠‡∏∑‡πà‡∏ô‡∏ï‡πà‡∏≠‡πÑ‡∏´‡∏°? (y/n): ").strip().lower()
                if next_action not in ['y', 'yes', '‡πÉ‡∏ä‡πà']:
                    safe_print(f"\nüéâ ‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£!")
                    break
                    
            except KeyboardInterrupt:
                safe_print(f"\n\nüëã ‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ AI Content Engine!")
                break
            except Exception as e:
                safe_print(f"\n‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}")
                continue

# Main execution
async def main():
    """‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å"""
    try:
        interface = ThaiSafeInterface()
        await interface.run_interactive_mode()
    except KeyboardInterrupt:
        safe_print("\nüëã Goodbye!")
    except Exception as e:
        safe_print(f"\n‚ùå Fatal error: {e}")

if __name__ == "__main__":
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢
    safe_print("üîß ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢...")
    
    # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•
    test_thai = "‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢: ‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ üé¨"
    safe_print(f"üìù {test_thai}")
    
    try:
        asyncio.run(main())
    except Exception as e:
        safe_print(f"Failed to start: {e}")
        input("\n‡∏Å‡∏î Enter ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡∏¥‡∏î...")
