# content-engine/ai_services/text_ai/groq_service.py
import os
import json
import asyncio
from groq import Groq
from .base_text_ai import BaseTextAI
from dotenv import load_dotenv

load_dotenv()

class GroqService(BaseTextAI):
    def __init__(self):
        self.client = Groq(api_key=os.getenv('GROQ_API_KEY'))
        # ‡πÉ‡∏ä‡πâ model ‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ
        self.available_models = [
            "llama-3.3-70b-versatile",
            "llama-3.1-70b-versatile", 
            "llama-3.1-8b-instant",
            "mixtral-8x7b-32768",
            "gemma-7b-it"
        ]
        self.model = self.available_models[0]  # ‡πÉ‡∏ä‡πâ model ‡πÅ‡∏£‡∏Å‡∏ó‡∏µ‡πà‡∏°‡∏µ
    
    def test_model(self):
        """‡∏ó‡∏î‡∏™‡∏≠‡∏ö model ‡∏ß‡πà‡∏≤‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ‡πÑ‡∏´‡∏°"""
        for model in self.available_models:
            try:
                response = self.client.chat.completions.create(
                    model=model,
                    messages=[{"role": "user", "content": "Hello, test message"}],
                    max_tokens=10
                )
                self.model = model
                print(f"‚úÖ Using model: {model}")
                return True
            except Exception as e:
                print(f"‚ùå Model {model} failed: {e}")
                continue
        return False
    
    async def analyze_trend(self, trend_data: dict) -> dict:
        """‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå trend ‡∏à‡∏£‡∏¥‡∏á‡∏î‡πâ‡∏ß‡∏¢ Groq AI"""
        # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö model ‡∏Å‡πà‡∏≠‡∏ô
        if not self.test_model():
            print("‚ö†Ô∏è No working models found, using fallback data")
            return self._get_fallback_analysis()
        
        prompt = f"""
‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå trending topic ‡∏ô‡∏µ‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤:

‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠: {trend_data.get('topic', '')}
‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡∏¥‡∏¢‡∏°: {trend_data.get('popularity_score', 0)}
‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡πÄ‡∏ï‡∏¥‡∏ö‡πÇ‡∏ï: {trend_data.get('growth_rate', 0)}

‡πÉ‡∏´‡πâ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô 1-10 ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö:
- viral_potential (‡∏®‡∏±‡∏Å‡∏¢‡∏†‡∏≤‡∏û‡∏Å‡∏≤‡∏£‡πÅ‡∏û‡∏£‡πà‡∏Å‡∏£‡∏∞‡∏à‡∏≤‡∏¢)
- content_saturation (‡∏Ñ‡∏ß‡∏≤‡∏°‡∏≠‡∏¥‡πà‡∏°‡∏ï‡∏±‡∏ß‡∏Ç‡∏≠‡∏á‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤) 
- audience_interest (‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏ô‡πÉ‡∏à‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡∏ä‡∏°)
- monetization_opportunity (‡πÇ‡∏≠‡∏Å‡∏≤‡∏™‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ)

‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥ 3 ‡∏°‡∏∏‡∏°‡∏°‡∏≠‡∏á‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ã‡πâ‡∏≥‡πÉ‡∏Ñ‡∏£

‡∏ï‡∏≠‡∏ö‡πÄ‡∏õ‡πá‡∏ô JSON ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô:
{
    "scores": {
        "viral_potential": 8,
        "content_saturation": 3,
        "audience_interest": 9,
        "monetization_opportunity": 7
    },
    "content_angles": [
        "‡∏°‡∏∏‡∏°‡∏°‡∏≠‡∏á‡∏ó‡∏µ‡πà 1",
        "‡∏°‡∏∏‡∏°‡∏°‡∏≠‡∏á‡∏ó‡∏µ‡πà 2", 
        "‡∏°‡∏∏‡∏°‡∏°‡∏≠‡∏á‡∏ó‡∏µ‡πà 3"
    ],
    "recommended_platforms": ["youtube", "tiktok"],
    "estimated_reach": 50000
}
        """
        
        try:
            response = self.client.chat.completions.create(
                model=self.model,
                messages=[
                    {"role": "system", "content": "‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏õ‡πá‡∏ô‡∏ú‡∏π‡πâ‡πÄ‡∏ä‡∏µ‡πà‡∏¢‡∏ß‡∏ä‡∏≤‡∏ç‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÄ‡∏ó‡∏£‡∏ô‡∏î‡πå ‡∏ï‡∏≠‡∏ö‡πÄ‡∏õ‡πá‡∏ô JSON ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô"},
                    {"role": "user", "content": prompt}
                ],
                temperature=0.7,
                max_tokens=800
            )
            
            content = response.choices[0].message.content
            # ‡∏•‡∏≠‡∏á‡πÅ‡∏¢‡∏Å JSON ‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
            if '{' in content:
                json_start = content.find('{')
                json_end = content.rfind('}') + 1
                json_str = content[json_start:json_end]
                result = json.loads(json_str)
                print(f"‚úÖ Groq analysis successful with {self.model}")
                return result
            else:
                raise ValueError("No JSON found in response")
            
        except Exception as e:
            print(f"‚ùå Groq API Error: {e}")
            return self._get_fallback_analysis()
    
    async def generate_content_script(self, idea: str, platform: str = "youtube") -> dict:
        """‡∏™‡∏£‡πâ‡∏≤‡∏á script ‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏à‡∏£‡∏¥‡∏á‡∏î‡πâ‡∏ß‡∏¢ Groq"""
        if not hasattr(self, 'model') or not self.model:
            if not self.test_model():
                return self._get_fallback_script(idea)
        
        prompt = f"""
‡∏™‡∏£‡πâ‡∏≤‡∏á script ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤: {idea}
Platform: {platform}

‡∏™‡∏£‡πâ‡∏≤‡∏á script ‡∏ó‡∏µ‡πà‡∏°‡∏µ:
1. Hook (3 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ‡πÅ‡∏£‡∏Å) - ‡∏î‡∏∂‡∏á‡∏î‡∏π‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏ô‡πÉ‡∏à
2. ‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏´‡∏•‡∏±‡∏Å - ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏ä‡∏ô‡πå
3. Call-to-action - ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏ó‡∏≥

‡∏ï‡∏≠‡∏ö‡πÄ‡∏õ‡πá‡∏ô JSON ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô:
{
    "title": "‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡∏ó‡∏µ‡πà‡∏î‡∏∂‡∏á‡∏î‡∏π‡∏î",
    "description": "‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏™‡∏±‡πâ‡∏ô",
    "script": {
        "hook": "3 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ‡πÅ‡∏£‡∏Å",
        "main_content": "‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏´‡∏•‡∏±‡∏Å",
        "cta": "call to action"
    },
    "hashtags": ["#tag1", "#tag2"],
    "estimated_duration": "60 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ"
}
        """
        
        try:
            response = self.client.chat.completions.create(
                model=self.model,
                messages=[
                    {"role": "system", "content": "‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏õ‡πá‡∏ô‡∏ô‡∏±‡∏Å‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô script ‡∏°‡∏∑‡∏≠‡∏≠‡∏≤‡∏ä‡∏µ‡∏û ‡∏ï‡∏≠‡∏ö‡πÄ‡∏õ‡πá‡∏ô JSON ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô"},
                    {"role": "user", "content": prompt}
                ],
                temperature=0.8,
                max_tokens=1000
            )
            
            content = response.choices[0].message.content
            if '{' in content:
                json_start = content.find('{')
                json_end = content.rfind('}') + 1
                json_str = content[json_start:json_end]
                result = json.loads(json_str)
                print(f"‚úÖ Script generated with {self.model}")
                return result
            else:
                raise ValueError("No JSON in response")
            
        except Exception as e:
            print(f"‚ùå Groq Script Error: {e}")
            return self._get_fallback_script(idea)
    
    def _get_fallback_analysis(self):
        """‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• fallback ‡πÄ‡∏°‡∏∑‡πà‡∏≠ AI ‡πÑ‡∏°‡πà‡∏ó‡∏≥‡∏á‡∏≤‡∏ô"""
        return {
            "scores": {
                "viral_potential": 6, 
                "content_saturation": 4, 
                "audience_interest": 7, 
                "monetization_opportunity": 6
            },
            "content_angles": [
                "‡∏°‡∏∏‡∏°‡∏°‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏ô‡πà‡∏≤‡∏™‡∏ô‡πÉ‡∏à", 
                "‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡∏°‡πà‡πÜ", 
                "‡πÄ‡∏Ñ‡∏•‡πá‡∏î‡∏•‡∏±‡∏ö‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÄ‡∏Ñ‡∏¢‡∏£‡∏π‡πâ"
            ],
            "recommended_platforms": ["youtube", "tiktok"],
            "estimated_reach": 15000
        }
    
    def _get_fallback_script(self, idea):
        """Script fallback"""
        return {
            "title": f"‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö {idea}",
            "description": "‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏ó‡∏µ‡πà‡∏ô‡πà‡∏≤‡∏™‡∏ô‡πÉ‡∏à‡πÅ‡∏•‡∏∞‡∏°‡∏µ‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏ä‡∏ô‡πå",
            "script": {
                "hook": "‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏Ñ‡∏£‡∏±‡∏ö! ‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡πÄ‡∏£‡∏≤‡∏°‡∏≤‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏ô‡πà‡∏≤‡∏™‡∏ô‡πÉ‡∏à‡∏Å‡∏±‡∏ô",
                "main_content": f"‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á {idea} ‡∏ô‡∏±‡πâ‡∏ô‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏°‡∏≤‡∏Å‡πÄ‡∏û‡∏£‡∏≤‡∏∞...",
                "cta": "‡∏ñ‡πâ‡∏≤‡∏ä‡∏≠‡∏ö‡∏Å‡πá‡∏Å‡∏î Like ‡πÅ‡∏•‡∏∞ Subscribe ‡∏ô‡∏∞‡∏Ñ‡∏£‡∏±‡∏ö"
            },
            "hashtags": ["#content", "#viral", "#educational"],
            "estimated_duration": "2-3 ‡∏ô‡∏≤‡∏ó‡∏µ"
        }

# ‡∏ó‡∏î‡∏™‡∏≠‡∏ö models ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ
if __name__ == "__main__":
    from dotenv import load_dotenv
    load_dotenv()
    
    print("üîç ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Groq models...")
    available_models = check_available_models()
    
    if available_models:
        print(f"‚úÖ ‡∏û‡∏ö {len(available_models)} models")
        
        # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö service
        service = GroqService()
        if service.test_model():
            print(f"üéâ Groq service ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏î‡πâ‡∏ß‡∏¢ model: {service.model}")
        else:
            print("‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ model ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ")
    else:
        print("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Groq ‡πÑ‡∏î‡πâ")
