#!/usr/bin/env python3
"""
Google Trends - Fixed Version
‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏õ‡∏±‡∏ç‡∏´‡∏≤ rate limiting ‡πÅ‡∏•‡∏∞ 404 errors
"""

from pytrends.request import TrendReq
import pandas as pd
import time
import random

def get_trending_topics_safe():
    """‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Google Trends ‡πÅ‡∏ö‡∏ö‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢"""
    try:
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á TrendReq object ‡∏î‡πâ‡∏ß‡∏¢ settings ‡∏ó‡∏µ‡πà‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢
        pytrends = TrendReq(
            hl='en-US', 
            tz=360,
            timeout=(10, 25),
            retries=2,
            backoff_factor=0.1
        )
        
        print("üîç ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Google Trends...")
        
        # ‡∏ß‡∏¥‡∏ò‡∏µ‡∏ó‡∏µ‡πà 1: ‡πÉ‡∏ä‡πâ interest_over_time ‡πÅ‡∏ó‡∏ô trending_searches
        keywords = ['AI', 'ChatGPT', 'Technology', 'YouTube', 'Content Creation']
        
        print(f"üìä ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå keywords: {keywords}")
        
        # Build payload
        pytrends.build_payload(
            keywords, 
            cat=0, 
            timeframe='today 3-m',  # 3 ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡∏ú‡πà‡∏≤‡∏ô‡∏°‡∏≤
            geo='',  # ‡∏ó‡∏±‡πà‡∏ß‡πÇ‡∏•‡∏Å ‡πÅ‡∏ó‡∏ô 'TH' ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏´‡∏•‡∏µ‡∏Å‡πÄ‡∏•‡∏µ‡πà‡∏¢‡∏á geo restrictions
            gprop=''
        )
        
        # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• interest over time
        interest_over_time = pytrends.interest_over_time()
        
        if not interest_over_time.empty:
            print("‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Interest Over Time ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:")
            
            # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞ keyword
            avg_interest = interest_over_time.drop('isPartial', axis=1).mean().sort_values(ascending=False)
            
            for keyword, score in avg_interest.items():
                print(f"   {keyword}: {score:.1f}")
            
            return interest_over_time
        
        # ‡∏´‡∏ô‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏´‡∏•‡∏µ‡∏Å‡πÄ‡∏•‡∏µ‡πà‡∏¢‡∏á rate limiting
        time.sleep(random.uniform(1, 3))
        
        # ‡∏ß‡∏¥‡∏ò‡∏µ‡∏ó‡∏µ‡πà 2: ‡∏•‡∏≠‡∏á related topics
        print("\nüîé ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ Related Topics...")
        related_topics = pytrends.related_topics()
        
        if related_topics:
            print("‚úÖ ‡∏û‡∏ö Related Topics:")
            for keyword, topics in related_topics.items():
                if topics['top'] is not None and not topics['top'].empty:
                    print(f"\nüìà {keyword} - Top Related:")
                    print(topics['top']['topic_title'].head(3).to_list())
        
        return interest_over_time
        
    except Exception as e:
        print(f"‚ùå Error: {e}")
        print("üí° ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥:")
        print("   - Google ‡∏≠‡∏≤‡∏à‡∏ö‡∏•‡πá‡∏≠‡∏Å IP ‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß")
        print("   - ‡∏•‡∏≠‡∏á‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÉ‡∏ô‡∏†‡∏≤‡∏¢‡∏´‡∏•‡∏±‡∏á")
        print("   - ‡πÉ‡∏ä‡πâ VPN ‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô network")
        return None

def get_related_queries_safe(keyword="AI"):
    """‡∏î‡∏∂‡∏á related queries ‡πÅ‡∏ö‡∏ö‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢"""
    try:
        pytrends = TrendReq(hl='en-US', tz=360)
        
        print(f"\nüîç ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ related queries ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö: {keyword}")
        
        # Build payload ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö keyword ‡πÄ‡∏î‡∏µ‡∏¢‡∏ß
        pytrends.build_payload([keyword], timeframe='today 1-m')
        
        # ‡∏î‡∏∂‡∏á related queries
        related_queries = pytrends.related_queries()
        
        if related_queries and keyword in related_queries:
            queries = related_queries[keyword]
            
            if queries['top'] is not None:
                print("‚úÖ Top Related Queries:")
                top_queries = queries['top']['query'].head(5).to_list()
                for i, query in enumerate(top_queries, 1):
                    print(f"   {i}. {query}")
                return top_queries
            
            if queries['rising'] is not None:
                print("üìà Rising Related Queries:")
                rising_queries = queries['rising']['query'].head(5).to_list()
                for i, query in enumerate(rising_queries, 1):
                    print(f"   {i}. {query}")
                return rising_queries
        
        return []
        
    except Exception as e:
        print(f"‚ùå Related queries error: {e}")
        return []

def get_sample_trends():
    """‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• trends ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏´‡∏≤‡∏Å Google Trends ‡πÑ‡∏°‡πà‡∏ó‡∏≥‡∏á‡∏≤‡∏ô"""
    print("\nüìã ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á (Google Trends ‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô)")
    
    sample_trends = {
        'AI Tools 2024': {'interest': 85, 'growth': '+15%', 'category': 'Technology'},
        'Content Creation': {'interest': 78, 'growth': '+12%', 'category': 'Media'},
        'YouTube Shorts': {'interest': 92, 'growth': '+25%', 'category': 'Entertainment'},
        'Digital Marketing': {'interest': 71, 'growth': '+8%', 'category': 'Business'},
        'ChatGPT': {'interest': 89, 'growth': '+18%', 'category': 'Technology'}
    }
    
    for topic, data in sample_trends.items():
        print(f"üìä {topic}: Interest {data['interest']}, Growth {data['growth']}")
    
    return sample_trends

def main():
    """‡∏£‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö Google Trends"""
    print("üåê Google Trends API Test (Fixed Version)")
    print("=" * 50)
    
    # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö interest over time
    trends_data = get_trending_topics_safe()
    
    if trends_data is not None and not trends_data.empty:
        print("\n‚úÖ Google Trends ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏õ‡∏Å‡∏ï‡∏¥")
        
        # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö related queries
        time.sleep(2)  # ‡∏´‡∏ô‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á requests
        related = get_related_queries_safe("Technology")
        
    else:
        print("\n‚ö†Ô∏è Google Trends ‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô")
        sample_data = get_sample_trends()
    
    print("\nüí° Tips ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ Google Trends:")
    print("1. ‡∏≠‡∏¢‡πà‡∏≤‡∏™‡πà‡∏á requests ‡∏ö‡πà‡∏≠‡∏¢‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ")
    print("2. ‡πÉ‡∏ä‡πâ timeframe ‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°")
    print("3. ‡∏´‡∏•‡∏µ‡∏Å‡πÄ‡∏•‡∏µ‡πà‡∏¢‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ geo specific ‡∏´‡∏≤‡∏Å‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤")
    print("4. ‡∏°‡∏µ backup plan ‡∏î‡πâ‡∏ß‡∏¢ sample data")

if __name__ == "__main__":
    main()