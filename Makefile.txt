# AI Content Factory - Makefile
# ==========================================

# Variables
PROJECT_NAME := ai-content-factory
VERSION := $(shell cat VERSION)
DOCKER_COMPOSE := docker-compose
DOCKER_COMPOSE_PROD := docker-compose -f docker-compose.yml -f docker-compose.prod.yml
PYTHON := python3
PIP := pip3

# Colors for output
RED := \033[0;31m
GREEN := \033[0;32m
YELLOW := \033[1;33m
BLUE := \033[0;34m
NC := \033[0m # No Color

# Default target
.DEFAULT_GOAL := help

# Help target
.PHONY: help
help:
	@echo "$(BLUE)AI Content Factory - Build Commands$(NC)"
	@echo "=================================="
	@echo ""
	@echo "$(GREEN)🚀 Quick Start:$(NC)"
	@echo "  make setup          - Setup development environment"
	@echo "  make dev            - Start development environment"
	@echo "  make stop           - Stop all services"
	@echo ""
	@echo "$(GREEN)🏗️  Build Commands:$(NC)"
	@echo "  make build          - Build all Docker images"
	@echo "  make rebuild        - Rebuild all images from scratch"
	@echo ""
	@echo "$(GREEN)🗄️  Database Commands:$(NC)"
	@echo "  make db-setup       - Initialize database"
	@echo "  make db-migrate     - Run database migrations"
	@echo "  make db-reset       - Reset database (WARNING: Data loss!)"
	@echo "  make db-backup      - Backup database"
	@echo ""
	@echo "$(GREEN)🧪 Testing:$(NC)"
	@echo "  make test           - Run all tests"
	@echo "  make test-unit      - Run unit tests only"
	@echo "  make test-integration - Run integration tests only"
	@echo "  make lint           - Run code linting"
	@echo ""
	@echo "$(GREEN)🚀 Deployment:$(NC)"
	@echo "  make prod           - Start production environment"
	@echo "  make deploy-staging - Deploy to staging"
	@echo "  make deploy-prod    - Deploy to production"
	@echo ""
	@echo "$(GREEN)📊 Monitoring:$(NC)"
	@echo "  make logs           - Show all service logs"
	@echo "  make monitor        - Start monitoring dashboard"
	@echo ""
	@echo "$(GREEN)🧹 Cleanup:$(NC)"
	@echo "  make clean          - Clean temporary files"
	@echo "  make clean-all      - Clean everything (images, volumes, etc.)"

# Setup and Installation
.PHONY: setup
setup:
	@echo "$(YELLOW)🔧 Setting up AI Content Factory...$(NC)"
	@if [ ! -f .env ]; then cp .env.example .env; echo "$(GREEN)✓ Created .env file$(NC)"; fi
	@$(PYTHON) -m venv venv || echo "$(YELLOW)⚠️  Virtual env already exists$(NC)"
	@echo "$(GREEN)✓ Setup completed! Run 'make dev' to start$(NC)"

# Development Environment
.PHONY: dev
dev:
	@echo "$(YELLOW)🚀 Starting development environment...$(NC)"
	@$(DOCKER_COMPOSE) up -d postgres redis
	@sleep 5
	@$(DOCKER_COMPOSE) up -d
	@echo "$(GREEN)✓ Development environment started!$(NC)"
	@echo "$(BLUE)📱 Dashboard: http://localhost:5000$(NC)"
	@echo "$(BLUE)📊 Monitoring: http://localhost:3001$(NC)"
	@echo "$(BLUE)🔄 n8n: http://localhost:5678$(NC)"

.PHONY: stop
stop:
	@echo "$(YELLOW)🛑 Stopping all services...$(NC)"
	@$(DOCKER_COMPOSE) down
	@echo "$(GREEN)✓ All services stopped$(NC)"

# Build Commands
.PHONY: build
build:
	@echo "$(YELLOW)🏗️  Building all Docker images...$(NC)"
	@$(DOCKER_COMPOSE) build
	@echo "$(GREEN)✓ Build completed$(NC)"

.PHONY: rebuild
rebuild:
	@echo "$(YELLOW)🔄 Rebuilding all images from scratch...$(NC)"
	@$(DOCKER_COMPOSE) build --no-cache
	@echo "$(GREEN)✓ Rebuild completed$(NC)"

# Database Commands
.PHONY: db-setup
db-setup:
	@echo "$(YELLOW)🗄️  Setting up database...$(NC)"
	@$(DOCKER_COMPOSE) exec postgres psql -U postgres -c "CREATE DATABASE IF NOT EXISTS content_factory;"
	@$(PYTHON) database/init_database.py
	@make db-migrate
	@echo "$(GREEN)✓ Database setup completed$(NC)"

.PHONY: db-migrate
db-migrate:
	@echo "$(YELLOW)🔄 Running database migrations...$(NC)"
	@$(PYTHON) database/migrate.py
	@echo "$(GREEN)✓ Migrations completed$(NC)"

.PHONY: db-reset
db-reset:
	@echo "$(RED)⚠️  WARNING: This will delete all data!$(NC)"
	@read -p "Are you sure? [y/N] " -n 1 -r; \
	if [[ $$REPLY =~ ^[Yy]$$ ]]; then \
		echo ""; \
		echo "$(YELLOW)🗑️  Resetting database...$(NC)"; \
		$(DOCKER_COMPOSE) down -v; \
		$(DOCKER_COMPOSE) up -d postgres; \
		sleep 5; \
		make db-setup; \
		echo "$(GREEN)✓ Database reset completed$(NC)"; \
	else \
		echo ""; \
		echo "$(GREEN)✓ Operation cancelled$(NC)"; \
	fi

.PHONY: db-backup
db-backup:
	@echo "$(YELLOW)💾 Creating database backup...$(NC)"
	@mkdir -p backups
	@$(DOCKER_COMPOSE) exec postgres pg_dump -U postgres content_factory > backups/backup_$(shell date +%Y%m%d_%H%M%S).sql
	@echo "$(GREEN)✓ Backup created in backups/$(NC)"

# Testing
.PHONY: test
test:
	@echo "$(YELLOW)🧪 Running all tests...$(NC)"
	@$(PYTHON) -m pytest tests/ -v
	@echo "$(GREEN)✓ All tests completed$(NC)"

.PHONY: test-unit
test-unit:
	@echo "$(YELLOW)🧪 Running unit tests...$(NC)"
	@$(PYTHON) -m pytest tests/unit/ -v
	@echo "$(GREEN)✓ Unit tests completed$(NC)"

.PHONY: test-integration
test-integration:
	@echo "$(YELLOW)🧪 Running integration tests...$(NC)"
	@$(PYTHON) -m pytest tests/integration/ -v
	@echo "$(GREEN)✓ Integration tests completed$(NC)"

.PHONY: lint
lint:
	@echo "$(YELLOW)🔍 Running code linting...$(NC)"
	@flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
	@black --check .
	@echo "$(GREEN)✓ Linting completed$(NC)"

# Production
.PHONY: prod
prod:
	@echo "$(YELLOW)🚀 Starting production environment...$(NC)"
	@$(DOCKER_COMPOSE_PROD) up -d
	@echo "$(GREEN)✓ Production environment started$(NC)"

.PHONY: deploy-staging
deploy-staging:
	@echo "$(YELLOW)🚀 Deploying to staging...$(NC)"
	@./scripts/deploy.sh staging
	@echo "$(GREEN)✓ Staging deployment completed$(NC)"

.PHONY: deploy-prod
deploy-prod:
	@echo "$(RED)⚠️  Deploying to PRODUCTION!$(NC)"
	@read -p "Are you sure? [y/N] " -n 1 -r; \
	if [[ $$REPLY =~ ^[Yy]$$ ]]; then \
		echo ""; \
		echo "$(YELLOW)🚀 Deploying to production...$(NC)"; \
		./scripts/deploy.sh production; \
		echo "$(GREEN)✓ Production deployment completed$(NC)"; \
	else \
		echo ""; \
		echo "$(GREEN)✓ Deployment cancelled$(NC)"; \
	fi

# Monitoring
.PHONY: logs
logs:
	@echo "$(YELLOW)📋 Showing service logs...$(NC)"
	@$(DOCKER_COMPOSE) logs -f

.PHONY: logs-service
logs-service:
	@read -p "Enter service name: " service; \
	$(DOCKER_COMPOSE) logs -f $$service

.PHONY: monitor
monitor:
	@echo "$(YELLOW)📊 Starting monitoring dashboard...$(NC)"
	@$(DOCKER_COMPOSE) up -d grafana prometheus
	@echo "$(GREEN)📊 Grafana: http://localhost:3000$(NC)"
	@echo "$(GREEN)📈 Prometheus: http://localhost:9090$(NC)"

# Utility Commands
.PHONY: shell
shell:
	@read -p "Enter service name: " service; \
	$(DOCKER_COMPOSE) exec $$service /bin/bash

.PHONY: install-deps
install-deps:
	@echo "$(YELLOW)📦 Installing Python dependencies...$(NC)"
	@$(PIP) install -r requirements.txt
	@echo "$(GREEN)✓ Dependencies installed$(NC)"

.PHONY: update-deps
update-deps:
	@echo "$(YELLOW)🔄 Updating dependencies...$(NC)"
	@$(PIP) install --upgrade -r requirements.txt
	@$(PIP) freeze > requirements.txt
	@echo "$(GREEN)✓ Dependencies updated$(NC)"

# Cleanup
.PHONY: clean
clean:
	@echo "$(YELLOW)🧹 Cleaning temporary files...$(NC)"
	@find . -type f -name "*.pyc" -delete
	@find . -type d -name "__pycache__" -delete
	@rm -rf .pytest_cache
	@rm -rf .coverage
	@rm -rf htmlcov
	@echo "$(GREEN)✓ Cleanup completed$(NC)"

.PHONY: clean-all
clean-all:
	@echo "$(RED)⚠️  This will remove all Docker images and volumes!$(NC)"
	@read -p "Are you sure? [y/N] " -n 1 -r; \
	if [[ $$REPLY =~ ^[Yy]$$ ]]; then \
		echo ""; \
		echo "$(YELLOW)🧹 Deep cleaning...$(NC)"; \
		$(DOCKER_COMPOSE) down -v --rmi all; \
		docker system prune -af; \
		make clean; \
		echo "$(GREEN)✓ Deep cleanup completed$(NC)"; \
	else \
		echo ""; \
		echo "$(GREEN)✓ Cleanup cancelled$(NC)"; \
	fi

# Development Helpers
.PHONY: status
status:
	@echo "$(BLUE)📊 System Status$(NC)"
	@echo "==============="
	@$(DOCKER_COMPOSE) ps

.PHONY: health
health:
	@echo "$(YELLOW)🏥 Checking service health...$(NC)"
	@curl -f http://localhost:5000/api/health || echo "$(RED)❌ Main API unhealthy$(NC)"
	@curl -f http://localhost:8001/health || echo "$(RED)❌ Trend Monitor unhealthy$(NC)"
	@curl -f http://localhost:8002/health || echo "$(RED)❌ Content Engine unhealthy$(NC)"
	@curl -f http://localhost:8003/health || echo "$(RED)❌ Platform Manager unhealthy$(NC)"
	@echo "$(GREEN)✓ Health check completed$(NC)"

# Quick development shortcuts
.PHONY: quick-start
quick-start: setup build dev
	@echo "$(GREEN)🎉 AI Content Factory is ready!$(NC)"

.PHONY: quick-test
quick-test: test-unit lint
	@echo "$(GREEN)✅ Quick tests passed!$(NC)"

# Version management
.PHONY: version
version:
	@echo "$(BLUE)Current version: $(VERSION)$(NC)"

.PHONY: bump-version
bump-version:
	@read -p "Enter new version (current: $(VERSION)): " new_version; \
	echo $$new_version > VERSION; \
	git add VERSION; \
	git commit -m "Bump version to $$new_version"; \
	git tag v$$new_version; \
	echo "$(GREEN)✓ Version bumped to $$new_version$(NC)"