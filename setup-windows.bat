@echo off
chcp 65001 >nul
echo üöÄ AI Content Factory System Setup for Windows
echo ================================================
echo.

REM ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
if not exist "docker-compose.yml" (
    echo ‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå docker-compose.yml
    echo ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ‡πÉ‡∏ô‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå ai-content-factory ‡∏Å‡πà‡∏≠‡∏ô
    pause
    exit /b 1
)

echo Phase 1: Setup Environment Variables
echo ------------------------------------

REM ‡∏™‡∏£‡πâ‡∏≤‡∏á .env file ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ
if not exist ".env" (
    if exist ".env.example" (
        copy ".env.example" ".env"
        echo ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå .env ‡∏à‡∏≤‡∏Å .env.example ‡πÅ‡∏•‡πâ‡∏ß
    ) else (
        echo ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå .env...
        echo # AI Content Factory Environment Variables > .env
        echo # Database >> .env
        echo POSTGRES_DB=content_factory >> .env
        echo POSTGRES_USER=admin >> .env
        echo POSTGRES_PASSWORD=password123 >> .env
        echo DATABASE_URL=postgresql://admin:password123@localhost:5432/content_factory >> .env
        echo. >> .env
        echo # API Keys >> .env
        echo GROQ_API_KEY=your_groq_api_key_here >> .env
        echo OPENAI_API_KEY=your_openai_api_key_here >> .env
        echo YOUTUBE_API_KEY=your_youtube_api_key_here >> .env
        echo. >> .env
        echo # N8N Settings >> .env
        echo N8N_PASSWORD=admin123 >> .env
        echo ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå .env ‡πÅ‡∏•‡πâ‡∏ß
    )
) else (
    echo ‚úÖ ‡πÑ‡∏ü‡∏•‡πå .env ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß
)

echo.
echo Phase 2: Start Database
echo -----------------------

echo ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô PostgreSQL Database...
docker-compose up -d postgres

echo ‡∏£‡∏≠ Database ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô (10 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ)...
timeout /t 10 /nobreak >nul

echo.
echo Phase 3: Run Database Migration
echo --------------------------------

echo ‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ‡πÉ‡∏ô‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå database...
cd database

REM ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡πÑ‡∏ü‡∏•‡πå migrate.py ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
if exist "migrate.py" (
    echo ‡∏£‡∏±‡∏ô Database Migration...
    python migrate.py
) else (
    echo ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•...
    if exist "migrations\001_create_trends_table.sql" (
        echo ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á trends...
        docker exec -i ai-content-factory_postgres_1 psql -U admin -d content_factory < migrations\001_create_trends_table.sql
    )
    if exist "migrations\002_create_opportunities_table.sql" (
        echo ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á opportunities...
        docker exec -i ai-content-factory_postgres_1 psql -U admin -d content_factory < migrations\002_create_opportunities_table.sql
    )
)

cd ..

echo.
echo Phase 4: Start Core Services
echo -----------------------------

echo ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô Trend Monitor Service...
docker-compose up -d trend-monitor

echo ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô Content Engine Service...
docker-compose up -d content-engine

echo.
echo Phase 5: Start Web Dashboard
echo -----------------------------

echo ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô Web Interface...
if exist "main.py" (
    echo ‡∏£‡∏±‡∏ô Flask Application...
    start /b python main.py
) else if exist "app.py" (
    echo ‡∏£‡∏±‡∏ô Flask Application...
    start /b python app.py
)

echo.
echo üéâ Setup ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô!
echo =================
echo.
echo ‚úÖ Database: http://localhost:5432
echo ‚úÖ Web Dashboard: http://localhost:5000
echo ‚úÖ N8N Workflow: http://localhost:5678
echo.
echo ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏π‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ services:
echo docker-compose ps
echo.
echo ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏π logs:
echo docker-compose logs [service-name]
echo.
pause