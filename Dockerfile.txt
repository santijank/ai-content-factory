# AI Content Factory - Docker Image
# ตำแหน่งไฟล์: Dockerfile
#
# Multi-stage build for optimized production image
# Base image: Python 3.11 with system dependencies

# === Build Stage ===
FROM python:3.11-slim as builder

# Set build arguments
ARG BUILDPLATFORM
ARG TARGETPLATFORM
ARG BUILD_DATE
ARG VCS_REF

# Metadata
LABEL maintainer="AI Content Factory Team"
LABEL description="AI-powered content creation and automation platform"
LABEL version="1.0.0"
LABEL build-date=$BUILD_DATE
LABEL vcs-ref=$VCS_REF

# Set environment variables
ENV PYTHONUNBUFFERED=1 \
    PYTHONDONTWRITEBYTECODE=1 \
    PIP_NO_CACHE_DIR=1 \
    PIP_DISABLE_PIP_VERSION_CHECK=1 \
    POETRY_NO_INTERACTION=1 \
    POETRY_VENV_IN_PROJECT=1 \
    POETRY_CACHE_DIR=/tmp/poetry_cache

# Install system dependencies
RUN apt-get update && apt-get install -y --no-install-recommends \
    # Build essentials
    build-essential \
    gcc \
    g++ \
    make \
    # System libraries
    libpq-dev \
    libssl-dev \
    libffi-dev \
    # Media processing
    ffmpeg \
    libavcodec-dev \
    libavformat-dev \
    libavutil-dev \
    libswscale-dev \
    # Image processing
    libjpeg-dev \
    libpng-dev \
    libtiff-dev \
    libwebp-dev \
    # Audio processing
    libasound2-dev \
    libsndfile1-dev \
    # Web browser automation
    wget \
    gnupg \
    # Git for package installation
    git \
    # Curl for health checks
    curl \
    # Clean up
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean

# Install Chrome for web scraping (if needed)
RUN wget -q -O - https://dl-ssl.google.com/linux/linux_signing_key.pub | apt-key add - \
    && echo "deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main" >> /etc/apt/sources.list.d/google.list \
    && apt-get update \
    && apt-get install -y google-chrome-stable \
    && rm -rf /var/lib/apt/lists/*

# Install Poetry
RUN pip install poetry==1.6.1

# Copy dependency files
WORKDIR /app
COPY pyproject.toml poetry.lock* requirements.txt ./

# Install Python dependencies
RUN if [ -f pyproject.toml ]; then \
        poetry install --only=main --no-root && rm -rf $POETRY_CACHE_DIR; \
    else \
        pip install --no-cache-dir -r requirements.txt; \
    fi

# === Production Stage ===
FROM python:3.11-slim as production

# Set environment variables
ENV PYTHONUNBUFFERED=1 \
    PYTHONDONTWRITEBYTECODE=1 \
    PATH="/app/.venv/bin:$PATH" \
    FLASK_APP=main_app.py \
    FLASK_ENV=production \
    GUNICORN_WORKERS=4 \
    GUNICORN_TIMEOUT=120

# Install runtime dependencies only
RUN apt-get update && apt-get install -y --no-install-recommends \
    # Runtime libraries
    libpq5 \
    libssl3 \
    libffi8 \
    # Media processing runtime
    ffmpeg \
    libavcodec59 \
    libavformat59 \
    libavutil57 \
    # Image processing runtime
    libjpeg62-turbo \
    libpng16-16 \
    libtiff6 \
    libwebp7 \
    # Audio runtime
    libasound2 \
    libsndfile1 \
    # Chrome runtime
    google-chrome-stable \
    # Utilities
    curl \
    wget \
    # Clean up
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean

# Create app user for security
RUN groupadd -r appuser && useradd -r -g appuser appuser

# Set working directory
WORKDIR /app

# Copy virtual environment from builder
COPY --from=builder /app/.venv /app/.venv

# Copy application code
COPY . .

# Create necessary directories
RUN mkdir -p /app/data/uploads \
    /app/data/generated \
    /app/data/cache \
    /app/logs \
    && chown -R appuser:appuser /app

# Install additional Python packages not in requirements
RUN pip install --no-cache-dir gunicorn gevent

# Download NLTK data
RUN python -c "import nltk; nltk.download('punkt'); nltk.download('vader_lexicon')" || true

# Download spaCy model
RUN python -m spacy download en_core_web_sm || true

# Set up Chrome for Selenium
RUN mkdir -p /home/appuser/.config/google-chrome \
    && chown -R appuser:appuser /home/appuser

# Copy configuration files
COPY config/ /app/config/
COPY scripts/ /app/scripts/

# Make scripts executable
RUN chmod +x /app/scripts/*.py /app/scripts/*.sh 2>/dev/null || true

# Health check script
COPY --chmod=755 <<EOF /app/healthcheck.sh
#!/bin/bash
curl -f http://localhost:5000/health || exit 1
EOF

# Switch to non-root user
USER appuser

# Expose port
EXPOSE 5000

# Health check
HEALTHCHECK --interval=30s --timeout=30s --start-period=40s --retries=3 \
    CMD /app/healthcheck.sh

# === Startup Commands ===

# Development mode
FROM production as development
USER root
RUN pip install --no-cache-dir \
    flask-debugtoolbar \
    pytest \
    pytest-cov \
    black \
    flake8
USER appuser
CMD ["python", "main_app.py"]

# Production mode (default)
FROM production as default
CMD ["gunicorn", "--bind", "0.0.0.0:5000", "--workers", "$GUNICORN_WORKERS", "--timeout", "$GUNICORN_TIMEOUT", "--worker-class", "gevent", "--worker-connections", "1000", "main_app:app"]

# Worker mode for Celery
FROM production as worker
CMD ["python", "-m", "celery", "-A", "main_app.celery", "worker", "--loglevel=info", "--concurrency=2"]

# Scheduler mode for Celery Beat
FROM production as scheduler
CMD ["python", "-m", "celery", "-A", "main_app.celery", "beat", "--loglevel=info"]

# === Build Arguments Support ===
# Build with specific target:
# docker build --target development -t ai-content-factory:dev .
# docker build --target production -t ai-content-factory:prod .
# docker build --target worker -t ai-content-factory:worker .

# === Environment Variables ===
# Required environment variables:
ENV DB_TYPE=sqlite \
    DB_PATH=/app/data/content_factory.db \
    SECRET_KEY=change-this-in-production \
    REDIS_URL=redis://localhost:6379/0 \
    LOG_LEVEL=INFO

# Optional AI service variables (set in docker-compose or deployment)
# OPENAI_API_KEY=
# GROQ_API_KEY=
# ANTHROPIC_API_KEY=
# ELEVENLABS_API_KEY=

# Social media API keys
# YOUTUBE_API_KEY=
# TWITTER_API_KEY=
# FACEBOOK_ACCESS_TOKEN=

# === Volume Mounts ===
# Recommended volumes:
# - /app/data (for database and generated files)
# - /app/logs (for application logs)
# - /app/config (for configuration overrides)

# === Usage Examples ===
# 
# Build image:
# docker build -t ai-content-factory .
# 
# Run development:
# docker run -p 5000:5000 -v $(pwd):/app ai-content-factory:dev
# 
# Run production:
# docker run -p 5000:5000 -e SECRET_KEY=your-secret ai-content-factory:prod
# 
# Run with external database:
# docker run -p 5000:5000 \
#   -e DB_TYPE=postgresql \
#   -e DB_HOST=postgres.example.com \
#   -e DB_USER=user \
#   -e DB_PASSWORD=password \
#   ai-content-factory:prod
#
# Run worker:
# docker run --target worker ai-content-factory

# === Security Notes ===
# - Runs as non-root user 'appuser'
# - No package managers in production image
# - Minimal attack surface
# - Health checks enabled
# - Secrets via environment variables only

# === Multi-architecture Support ===
# Build for multiple architectures:
# docker buildx build --platform linux/amd64,linux/arm64 -t ai-content-factory --push .

# === Image Size Optimization ===
# Techniques used:
# - Multi-stage build
# - Minimal base image (slim)
# - Combined RUN statements
# - Cleanup in same layer
# - .dockerignore for build context