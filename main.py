# main.py - ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏Ç‡πá‡∏á‡πÅ‡∏Å‡∏£‡πà‡∏á‡∏Å‡∏ß‡πà‡∏≤
from flask import Flask, render_template, request, jsonify
import asyncio
import sys
import os
from datetime import datetime
from dotenv import load_dotenv

load_dotenv()

# ‡πÄ‡∏û‡∏¥‡πà‡∏° paths
sys.path.append('content-engine')
sys.path.append('database')

app = Flask(__name__)

# Global variables
groq_service = None
ai_service_status = {
    'groq': False,
    'openai': False,
    'working_model': None
}

def initialize_ai_services():
    """‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô AI services ‡πÅ‡∏•‡∏∞‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞"""
    global groq_service, ai_service_status
    
    print("ü§ñ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô AI Services...")
    
    # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö Groq
    try:
        from ai_services.text_ai.groq_service import GroqService
        groq_service = GroqService()
        
        # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ‡πÑ‡∏´‡∏°
        if hasattr(groq_service, 'test_model') and groq_service.test_model():
            ai_service_status['groq'] = True
            ai_service_status['working_model'] = groq_service.model
            print(f"‚úÖ Groq ready with model: {groq_service.model}")
        else:
            print("‚ö†Ô∏è Groq available but no working models")
            
    except Exception as e:
        print(f"‚ùå Groq initialization error: {e}")
        groq_service = None
    
    # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö OpenAI
    try:
        import openai
        from openai import OpenAI
        client = OpenAI(api_key=os.getenv('OPENAI_API_KEY'))
        
        # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏á‡πà‡∏≤‡∏¢‡πÜ
        response = client.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=[{"role": "user", "content": "test"}],
            max_tokens=5
        )
        ai_service_status['openai'] = True
        print("‚úÖ OpenAI ready")
        
    except Exception as e:
        if "insufficient_quota" in str(e):
            print("‚ö†Ô∏è OpenAI quota exceeded")
        else:
            print(f"‚ùå OpenAI error: {e}")
        ai_service_status['openai'] = False

# ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô AI services ‡πÄ‡∏°‡∏∑‡πà‡∏≠ start app
initialize_ai_services()

@app.route('/')
def dashboard():
    """Dashboard ‡∏´‡∏•‡∏±‡∏Å"""
    return render_template('dashboard.html')

@app.route('/api/system-status')
def system_status():
    """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏£‡∏∞‡∏ö‡∏ö"""
    return jsonify({
        'ai_services': ai_service_status,
        'api_keys_configured': {
            'groq': bool(os.getenv('GROQ_API_KEY')),
            'openai': bool(os.getenv('OPENAI_API_KEY'))
        },
        'timestamp': datetime.now().isoformat()
    })

@app.route('/api/collect-trends', methods=['POST'])
def collect_trends():
    """‡πÄ‡∏Å‡πá‡∏ö trends ‡πÅ‡∏•‡∏∞‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏î‡πâ‡∏ß‡∏¢ AI"""
    try:
        print("üîÑ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏Å‡πá‡∏ö trends...")
        
        # Mock trends data (‡∏à‡∏∞‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô real API ‡∏†‡∏≤‡∏¢‡∏´‡∏•‡∏±‡∏á)
        trends = [
            {
                'topic': 'AI Content Creation 2024',
                'popularity_score': 89,
                'growth_rate': 25,
                'source': 'youtube'
            },
            {
                'topic': 'TikTok Marketing Trends',
                'popularity_score': 76,
                'growth_rate': 18,
                'source': 'google_trends'
            },
            {
                'topic': 'Passive Income Ideas',
                'popularity_score': 82,
                'growth_rate': 32,
                'source': 'youtube'
            },
            {
                'topic': 'Social Media Analytics',
                'popularity_score': 71,
                'growth_rate': 15,
                'source': 'twitter'
            },
            {
                'topic': 'Video Editing Tutorial',
                'popularity_score': 68,
                'growth_rate': 22,
                'source': 'youtube'
            }
        ]
        
        # ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÅ‡∏ï‡πà‡∏•‡∏∞ trend
        analyzed_trends = []
        ai_analysis_count = 0
        
        for trend in trends:
            if groq_service and ai_service_status['groq']:
                try:
                    print(f"ü§ñ AI ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå: {trend['topic']}")
                    loop = asyncio.new_event_loop()
                    asyncio.set_event_loop(loop)
                    
                    analysis = loop.run_until_complete(
                        groq_service.analyze_trend(trend)
                    )
                    loop.close()
                    
                    trend['ai_analysis'] = analysis
                    trend['analysis_method'] = 'ai'
                    ai_analysis_count += 1
                    
                except Exception as e:
                    print(f"‚ùå AI analysis failed for {trend['topic']}: {e}")
                    trend['ai_analysis'] = get_fallback_analysis(trend)
                    trend['analysis_method'] = 'fallback'
            else:
                # ‡πÉ‡∏ä‡πâ rule-based analysis
                trend['ai_analysis'] = get_smart_fallback_analysis(trend)
                trend['analysis_method'] = 'rule_based'
            
            # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì opportunity score
            scores = trend['ai_analysis']['scores']
            opportunity_score = (
                scores.get('viral_potential', 5) * 0.3 +
                scores.get('audience_interest', 5) * 0.3 +
                scores.get('monetization_opportunity', 5) * 0.2 +
                (10 - scores.get('content_saturation', 5)) * 0.2
            )
            trend['opportunity_score'] = round(opportunity_score, 1)
            analyzed_trends.append(trend)
        
        # ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏ï‡∏≤‡∏° opportunity score
        analyzed_trends.sort(key=lambda x: x['opportunity_score'], reverse=True)
        
        return jsonify({
            'success': True,
            'trends_collected': len(analyzed_trends),
            'ai_analysis_count': ai_analysis_count,
            'trends': analyzed_trends,
            'ai_enabled': ai_service_status['groq'] or ai_service_status['openai'],
            'working_model': ai_service_status.get('working_model'),
            'timestamp': datetime.now().isoformat()
        })
        
    except Exception as e:
        print(f"‚ùå Error collecting trends: {e}")
        return jsonify({
            'success': False,
            'error': str(e)
        }), 500

@app.route('/api/generate-content', methods=['POST'])
def generate_content():
    """‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏à‡∏≤‡∏Å opportunity ‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å"""
    try:
        data = request.json
        idea = data.get('idea', '')
        platform = data.get('platform', 'youtube')
        
        if not idea:
            return jsonify({'success': False, 'error': 'Missing content idea'})
        
        print(f"üé¨ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤: {idea}")
        
        if groq_service and ai_service_status['groq']:
            try:
                # ‡∏™‡∏£‡πâ‡∏≤‡∏á script ‡∏î‡πâ‡∏ß‡∏¢ AI ‡∏à‡∏£‡∏¥‡∏á
                loop = asyncio.new_event_loop()
                asyncio.set_event_loop(loop)
                
                content = loop.run_until_complete(
                    groq_service.generate_content_script(idea, platform)
                )
                loop.close()
                
                content['generation_method'] = 'ai'
                content['model_used'] = ai_service_status.get('working_model', 'unknown')
                
            except Exception as e:
                print(f"‚ùå AI content generation failed: {e}")
                content = get_fallback_content(idea, platform)
                content['generation_method'] = 'fallback'
        else:
            # Fallback content with smart templates
            content = get_smart_fallback_content(idea, platform)
            content['generation_method'] = 'template'
        
        return jsonify({
            'success': True,
            'content': content,
            'ai_enabled': content['generation_method'] == 'ai',
            'timestamp': datetime.now().isoformat()
        })
        
    except Exception as e:
        print(f"‚ùå Content generation error: {e}")
        return jsonify({
            'success': False,
            'error': str(e)
        }), 500

def get_fallback_analysis(trend_data):
    """‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• fallback ‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô"""
    return {
        "scores": {
            "viral_potential": 5, 
            "content_saturation": 5, 
            "audience_interest": 5, 
            "monetization_opportunity": 5
        },
        "content_angles": [
            "‡∏°‡∏∏‡∏°‡∏°‡∏≠‡∏á‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ", 
            "‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡∏°‡πà", 
            "‡πÄ‡∏Ñ‡∏•‡πá‡∏î‡∏•‡∏±‡∏ö‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏ä‡∏ô‡πå"
        ],
        "recommended_platforms": ["youtube"],
        "estimated_reach": 10000
    }

def get_smart_fallback_analysis(trend_data):
    """Rule-based analysis ‡∏ó‡∏µ‡πà‡∏ä‡∏≤‡∏ç‡∏â‡∏•‡∏≤‡∏î‡∏Å‡∏ß‡πà‡∏≤"""
    topic = trend_data.get('topic', '').lower()
    popularity = trend_data.get('popularity_score', 50)
    growth = trend_data.get('growth_rate', 10)
    
    # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏ï‡∏≤‡∏° keywords ‡πÅ‡∏•‡∏∞ metrics
    viral_potential = min(10, max(1, int(popularity / 10)))
    audience_interest = min(10, max(1, int((popularity + growth) / 15)))
    
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö keywords ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô
    high_engagement_keywords = ['tutorial', 'how to', 'tips', 'secrets', 'viral', 'trending']
    monetization_keywords = ['business', 'money', 'income', 'marketing', 'sales']
    saturated_keywords = ['basic', 'simple', 'easy', 'beginner']
    
    content_saturation = 5
    monetization_opportunity = 5
    
    for keyword in high_engagement_keywords:
        if keyword in topic:
            viral_potential = min(10, viral_potential + 1)
            break
    
    for keyword in monetization_keywords:
        if keyword in topic:
            monetization_opportunity = min(10, monetization_opportunity + 2)
            break
    
    for keyword in saturated_keywords:
        if keyword in topic:
            content_saturation = min(10, content_saturation + 2)
            break
    
    # ‡∏™‡∏£‡πâ‡∏≤‡∏á content angles ‡πÅ‡∏ö‡∏ö‡∏ä‡∏≤‡∏ç‡∏â‡∏•‡∏≤‡∏î
    if 'tutorial' in topic or 'how to' in topic:
        angles = [
            "‡∏™‡∏≠‡∏ô‡πÅ‡∏ö‡∏ö‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏á‡πà‡∏≤‡∏¢‡πÜ",
            "‡πÄ‡∏Ñ‡∏•‡πá‡∏î‡∏•‡∏±‡∏ö‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡∏ó‡∏µ‡πà‡∏Ñ‡∏ô‡πÑ‡∏°‡πà‡∏£‡∏π‡πâ", 
            "‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏ó‡∏µ‡πà‡∏Ñ‡∏ß‡∏£‡∏´‡∏•‡∏µ‡∏Å‡πÄ‡∏•‡∏µ‡πà‡∏¢‡∏á"
        ]
    elif 'marketing' in topic or 'business' in topic:
        angles = [
            "‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ‡∏à‡∏£‡∏¥‡∏á",
            "‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á case study", 
            "‡πÄ‡∏ó‡∏Ñ‡∏ô‡∏¥‡∏Ñ‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÄ‡∏ä‡∏µ‡πà‡∏¢‡∏ß‡∏ä‡∏≤‡∏ç"
        ]
    else:
        angles = [
            f"‡∏°‡∏∏‡∏°‡∏°‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏Ç‡∏≠‡∏á {trend_data.get('topic', '‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠')}",
            "‡πÄ‡∏ó‡∏£‡∏ô‡∏î‡πå‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏°‡∏≤‡πÅ‡∏£‡∏á", 
            "‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏Ñ‡∏ô‡πÑ‡∏°‡πà‡πÄ‡∏Ñ‡∏¢‡∏£‡∏π‡πâ"
        ]
    
    return {
        "scores": {
            "viral_potential": viral_potential,
            "content_saturation": content_saturation,
            "audience_interest": audience_interest,
            "monetization_opportunity": monetization_opportunity
        },
        "content_angles": angles,
        "recommended_platforms": ["youtube", "tiktok"] if viral_potential > 6 else ["youtube"],
        "estimated_reach": popularity * growth * 10
    }

def get_fallback_content(idea, platform):
    """Fallback content ‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô"""
    return {
        "title": f"‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö {idea}",
        "description": "‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏ó‡∏µ‡πà‡∏ô‡πà‡∏≤‡∏™‡∏ô‡πÉ‡∏à‡πÅ‡∏•‡∏∞‡∏°‡∏µ‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏ä‡∏ô‡πå",
        "script": {
            "hook": "‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏Ñ‡∏£‡∏±‡∏ö! ‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡πÄ‡∏£‡∏≤‡∏°‡∏≤‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏Å‡∏±‡∏ô",
            "main_content": f"‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á {idea} ‡∏ô‡∏±‡πâ‡∏ô‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡πÄ‡∏û‡∏£‡∏≤‡∏∞...",
            "cta": "‡∏ñ‡πâ‡∏≤‡∏ä‡∏≠‡∏ö‡∏Å‡πá‡∏Å‡∏î Like ‡πÅ‡∏•‡∏∞ Subscribe ‡∏ô‡∏∞‡∏Ñ‡∏£‡∏±‡∏ö"
        },
        "hashtags": ["#content", "#viral"],
        "estimated_duration": "2-3 ‡∏ô‡∏≤‡∏ó‡∏µ"
    }

def get_smart_fallback_content(idea, platform):
    """Template-based content ‡∏ó‡∏µ‡πà‡∏ä‡∏≤‡∏ç‡∏â‡∏•‡∏≤‡∏î‡∏Å‡∏ß‡πà‡∏≤"""
    idea_lower = idea.lower()
    
    # ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å template ‡∏ï‡∏≤‡∏° keyword
    if any(word in idea_lower for word in ['tutorial', 'how to', '‡∏ß‡∏¥‡∏ò‡∏µ', '‡∏™‡∏≠‡∏ô']):
        template_type = 'tutorial'
    elif any(word in idea_lower for word in ['tips', '‡πÄ‡∏Ñ‡∏•‡πá‡∏î‡∏•‡∏±‡∏ö', '‡∏Ñ‡∏ß‡∏≤‡∏°‡∏•‡∏±‡∏ö']):
        template_type = 'tips'
    elif any(word in idea_lower for word in ['review', '‡∏£‡∏µ‡∏ß‡∏¥‡∏ß', '‡∏ó‡∏î‡∏™‡∏≠‡∏ö']):
        template_type = 'review'
    else:
        template_type = 'general'
    
    templates = {
        'tutorial': {
            "title": f"‡∏™‡∏≠‡∏ô {idea} ‡πÅ‡∏ö‡∏ö‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î | ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏à‡∏≤‡∏Å‡∏®‡∏π‡∏ô‡∏¢‡πå",
            "hook": "‡πÉ‡∏Ñ‡∏£‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏≤‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏ô‡∏µ‡πâ‡∏ï‡πâ‡∏≠‡∏á‡∏î‡∏π! ‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡πÄ‡∏£‡∏≤‡∏à‡∏∞‡∏™‡∏≠‡∏ô‡∏ï‡∏±‡πâ‡∏á‡πÅ‡∏ï‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô",
            "main": f"‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á {idea} ‡∏ô‡∏±‡πâ‡∏ô‡∏ó‡∏≥‡πÑ‡∏î‡πâ‡∏á‡πà‡∏≤‡∏¢‡∏°‡∏≤‡∏Å ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡πÅ‡∏£‡∏Å... ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏≠‡∏á... ‡πÅ‡∏•‡∏∞‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢...",
            "hashtags": ["#tutorial", "#howto", "#‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏ü‡∏£‡∏µ"]
        },
        'tips': {
            "title": f"5 ‡πÄ‡∏Ñ‡∏•‡πá‡∏î‡∏•‡∏±‡∏ö {idea} ‡∏ó‡∏µ‡πà‡∏Ñ‡∏ô‡πÑ‡∏°‡πà‡πÄ‡∏Ñ‡∏¢‡∏£‡∏π‡πâ!",
            "hook": "‡πÄ‡∏Ñ‡∏•‡πá‡∏î‡∏•‡∏±‡∏ö‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï‡∏Ñ‡∏∏‡∏ì! ‡∏Ç‡πâ‡∏≠‡πÅ‡∏£‡∏Å‡∏ô‡∏µ‡πâ‡∏Ñ‡∏ô‡πÑ‡∏°‡πà‡πÄ‡∏Ñ‡∏¢‡∏Ñ‡∏¥‡∏î",
            "main": f"‡πÄ‡∏Ñ‡∏•‡πá‡∏î‡∏•‡∏±‡∏ö‡πÅ‡∏£‡∏Å‡∏Ç‡∏≠‡∏á {idea} ‡∏Ñ‡∏∑‡∏≠... ‡πÄ‡∏Ñ‡∏•‡πá‡∏î‡∏•‡∏±‡∏ö‡∏ó‡∏µ‡πà‡∏™‡∏≠‡∏á‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏°‡∏≤‡∏Å... ‡πÅ‡∏•‡∏∞‡πÄ‡∏Ñ‡∏•‡πá‡∏î‡∏•‡∏±‡∏ö‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢...",
            "hashtags": ["#tips", "#‡πÄ‡∏Ñ‡∏•‡πá‡∏î‡∏•‡∏±‡∏ö", "#lifehack"]
        },
        'review': {
            "title": f"‡∏£‡∏µ‡∏ß‡∏¥‡∏ß {idea} ‡∏à‡∏£‡∏¥‡∏á‡πÑ‡∏´‡∏°? ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡πâ‡∏ß‡∏ú‡∏•‡∏≠‡∏≠‡∏Å‡∏°‡∏≤...",
            "hook": "‡∏Ñ‡∏ô‡πÄ‡∏Ç‡∏≤‡∏û‡∏π‡∏î‡∏Å‡∏±‡∏ô‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏ô‡∏µ‡πâ ‡πÄ‡∏£‡∏≤‡πÄ‡∏•‡∏¢‡πÑ‡∏õ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏à‡∏£‡∏¥‡∏á‡∏°‡∏≤ ‡∏ú‡∏•‡∏≠‡∏≠‡∏Å‡∏°‡∏≤...",
            "main": f"‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö {idea} ‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ô‡∏µ‡πâ ‡∏û‡∏ö‡∏ß‡πà‡∏≤... ‡∏Ç‡πâ‡∏≠‡∏î‡∏µ‡∏Ñ‡∏∑‡∏≠... ‡∏Ç‡πâ‡∏≠‡πÄ‡∏™‡∏µ‡∏¢‡∏Ñ‡∏∑‡∏≠...",
            "hashtags": ["#review", "#‡∏£‡∏µ‡∏ß‡∏¥‡∏ß", "#‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏à‡∏£‡∏¥‡∏á"]
        },
        'general': {
            "title": f"‡∏ó‡∏∏‡∏Å‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö {idea} ‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏£‡∏π‡πâ",
            "hook": "‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏ô‡∏™‡∏á‡∏™‡∏±‡∏¢ ‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡πÄ‡∏£‡∏≤‡∏°‡∏µ‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡πÅ‡∏•‡πâ‡∏ß!",
            "main": f"‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á {idea} ‡∏ô‡∏±‡πâ‡∏ô ‡∏°‡∏µ‡∏´‡∏•‡∏≤‡∏¢‡∏î‡πâ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ô‡πà‡∏≤‡∏™‡∏ô‡πÉ‡∏à ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÅ‡∏£‡∏Å... ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏™‡∏≠‡∏á...",
            "hashtags": ["#‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏π‡πâ", "#‡∏ô‡πà‡∏≤‡∏™‡∏ô‡πÉ‡∏à", "#viral"]
        }
    }
    
    template = templates[template_type]
    
    # ‡∏õ‡∏£‡∏±‡∏ö CTA ‡∏ï‡∏≤‡∏° platform
    if platform == 'tiktok':
        cta = "‡∏ñ‡πâ‡∏≤‡∏ä‡∏≠‡∏ö‡∏Å‡πá double tap ‡πÅ‡∏•‡∏∞ follow ‡πÄ‡∏•‡∏¢! üíñ"
    elif platform == 'youtube':
        cta = "‡∏ñ‡πâ‡∏≤‡∏ä‡∏≠‡∏ö‡∏Å‡∏î Like ‡πÅ‡∏•‡∏∞ Subscribe ‡∏Å‡∏î‡∏Å‡∏£‡∏∞‡∏î‡∏¥‡πà‡∏á‡∏î‡πâ‡∏ß‡∏¢‡∏ô‡∏∞‡∏Ñ‡∏£‡∏±‡∏ö! üîî"
    else:
        cta = "‡∏ñ‡πâ‡∏≤‡∏ä‡∏≠‡∏ö‡∏Å‡πá‡πÉ‡∏´‡πâ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÉ‡∏à‡∏Å‡∏±‡∏ô‡∏î‡πâ‡∏ß‡∏¢‡∏ô‡∏∞! üëç"
    
    return {
        "title": template["title"],
        "description": f"‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö {idea} ‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏Ñ‡∏ß‡∏£‡∏û‡∏•‡∏≤‡∏î",
        "script": {
            "hook": template["hook"],
            "main_content": template["main"],
            "cta": cta
        },
        "hashtags": template["hashtags"] + [f"#{idea.replace(' ', '')}"],
        "estimated_duration": "2-3 ‡∏ô‡∏≤‡∏ó‡∏µ"
    }

@app.route('/api/reinitialize-ai', methods=['POST'])
def reinitialize_ai():
    """‡∏•‡∏≠‡∏á‡πÄ‡∏£‡∏¥‡πà‡∏° AI services ‡πÉ‡∏´‡∏°‡πà"""
    try:
        initialize_ai_services()
        return jsonify({
            'success': True,
            'ai_services': ai_service_status,
            'message': 'AI services reinitialized'
        })
    except Exception as e:
        return jsonify({
            'success': False,
            'error': str(e)
        }), 500

if __name__ == '__main__':
    print("üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô AI Content Factory")
    print(f"ü§ñ AI Status: Groq={ai_service_status['groq']}, OpenAI={ai_service_status['openai']}")
    if ai_service_status['working_model']:
        print(f"‚ú® Using model: {ai_service_status['working_model']}")
    print("üîó URL: http://localhost:5000")
    print("üìù ‡∏Å‡∏î Ctrl+C ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏´‡∏¢‡∏∏‡∏î")
    
    app.run(debug=True, port=5000)