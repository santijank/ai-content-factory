apiVersion: apps/v1
kind: Deployment
metadata:
  name: web-dashboard
  namespace: ai-content-factory
  labels:
    app: web-dashboard
    component: frontend
    version: v1.0.0
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
      maxSurge: 2
  selector:
    matchLabels:
      app: web-dashboard
  template:
    metadata:
      labels:
        app: web-dashboard
        component: frontend
        version: v1.0.0
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "3000"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: ai-content-factory-sa
      imagePullSecrets:
      - name: registry-secret
      containers:
      - name: web-dashboard
        image: ai-content-factory/web-dashboard:latest
        imagePullPolicy: Always
        ports:
        - containerPort: 3000
          name: http
          protocol: TCP
        env:
        - name: NODE_ENV
          value: "production"
        - name: PORT
          value: "3000"
        - name: API_BASE_URL
          value: "http://api-gateway-service:8080"
        - name: TREND_MONITOR_URL
          valueFrom:
            configMapKeyRef:
              name: ai-content-factory-config
              key: TREND_MONITOR_URL
        - name: CONTENT_ENGINE_URL
          valueFrom:
            configMapKeyRef:
              name: ai-content-factory-config
              key: CONTENT_ENGINE_URL
        - name: PLATFORM_MANAGER_URL
          valueFrom:
            configMapKeyRef:
              name: ai-content-factory-config
              key: PLATFORM_MANAGER_URL
        - name: MONITORING_URL
          valueFrom:
            configMapKeyRef:
              name: ai-content-factory-config
              key: MONITORING_URL
        - name: WEBSOCKET_URL
          value: "ws://api-gateway-service:8080/ws"
        resources:
          requests:
            memory: "128Mi"
            cpu: "50m"
          limits:
            memory: "256Mi"
            cpu: "200m"
        livenessProbe:
          httpGet:
            path: /health
            port: 3000
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /
            port: 3000
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
        volumeMounts:
        - name: nginx-config
          mountPath: /etc/nginx/conf.d
          readOnly: true
        securityContext:
          runAsNonRoot: true
          runAsUser: 101
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          capabilities:
            drop:
            - ALL
            add:
            - NET_BIND_SERVICE
      volumes:
      - name: nginx-config
        configMap:
          name: nginx-config
      nodeSelector:
        kubernetes.io/os: linux
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - web-dashboard
              topologyKey: kubernetes.io/hostname