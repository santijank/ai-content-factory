{
  "name": "ðŸ”— AI Content Factory - Webhook Handlers",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "platform-callback",
        "responseMode": "onReceived",
        "options": {}
      },
      "id": "platform-callback-webhook",
      "name": "Platform Callback Webhook",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [200, 200],
      "webhookId": "platform-callback-handler",
      "credentials": {}
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "content-status",
        "responseMode": "onReceived",
        "options": {}
      },
      "id": "content-status-webhook",
      "name": "Content Status Webhook",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [200, 400],
      "webhookId": "content-status-handler",
      "credentials": {}
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "analytics-update",
        "responseMode": "onReceived",
        "options": {}
      },
      "id": "analytics-webhook",
      "name": "Analytics Update Webhook",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [200, 600],
      "webhookId": "analytics-update-handler",
      "credentials": {}
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "user-action",
        "responseMode": "onReceived",
        "options": {}
      },
      "id": "user-action-webhook",
      "name": "User Action Webhook",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [200, 800],
      "webhookId": "user-action-handler",
      "credentials": {}
    },
    {
      "parameters": {
        "jsCode": "// Platform Callback Handler\nconst webhookData = $input.all()[0];\n\nfunction validateWebhookSignature(data, signature, secret) {\n  const crypto = require('crypto');\n  const expectedSignature = crypto\n    .createHmac('sha256', secret)\n    .update(JSON.stringify(data))\n    .digest('hex');\n  return signature === `sha256=${expectedSignature}`;\n}\n\nfunction processPlatformCallback(data) {\n  const platform = data.platform || 'unknown';\n  const eventType = data.event_type || data.type || 'unknown';\n  \n  // YouTube webhook processing\n  if (platform === 'youtube') {\n    return {\n      platform: 'youtube',\n      event_type: eventType,\n      video_id: data.video_id || data.id,\n      channel_id: data.channel_id,\n      status: data.status,\n      upload_status: data.upload_status,\n      processing_progress: data.processing_progress,\n      monetization_status: data.monetization_status,\n      privacy_status: data.privacy_status,\n      published_at: data.published_at,\n      view_count: data.view_count || 0,\n      like_count: data.like_count || 0,\n      comment_count: data.comment_count || 0\n    };\n  }\n  \n  // TikTok webhook processing\n  if (platform === 'tiktok') {\n    return {\n      platform: 'tiktok',\n      event_type: eventType,\n      video_id: data.video_id || data.item_id,\n      user_id: data.user_id,\n      status: data.status,\n      share_url: data.share_url,\n      embed_url: data.embed_url,\n      view_count: data.view_count || 0,\n      like_count: data.like_count || 0,\n      share_count: data.share_count || 0,\n      comment_count: data.comment_count || 0,\n      created_time: data.created_time\n    };\n  }\n  \n  // Instagram webhook processing\n  if (platform === 'instagram') {\n    return {\n      platform: 'instagram',\n      event_type: eventType,\n      media_id: data.media_id || data.id,\n      user_id: data.user_id,\n      media_type: data.media_type,\n      media_url: data.media_url,\n      permalink: data.permalink,\n      caption: data.caption,\n      timestamp: data.timestamp,\n      like_count: data.like_count || 0,\n      comments_count: data.comments_count || 0\n    };\n  }\n  \n  // Facebook webhook processing\n  if (platform === 'facebook') {\n    return {\n      platform: 'facebook',\n      event_type: eventType,\n      post_id: data.post_id || data.id,\n      page_id: data.page_id,\n      message: data.message,\n      story: data.story,\n      created_time: data.created_time,\n      updated_time: data.updated_time,\n      likes: data.likes?.summary?.total_count || 0,\n      comments: data.comments?.summary?.total_count || 0,\n      shares: data.shares?.count || 0\n    };\n  }\n  \n  // Generic platform processing\n  return {\n    platform: platform,\n    event_type: eventType,\n    raw_data: data,\n    processed_at: new Date().toISOString()\n  };\n}\n\n// Validate webhook signature if provided\nif (webhookData.headers && webhookData.headers['x-signature']) {\n  const isValid = validateWebhookSignature(\n    webhookData.body,\n    webhookData.headers['x-signature'],\n    $env.WEBHOOK_SECRET\n  );\n  \n  if (!isValid) {\n    throw new Error('Invalid webhook signature');\n  }\n}\n\n// Process the platform callback\nconst processedData = processPlatformCallback(webhookData.body);\n\nreturn [{\n  ...processedData,\n  webhook_id: webhookData.headers?.['x-webhook-id'] || `webhook_${Date.now()}`,\n  received_at: new Date().toISOString(),\n  source_ip: webhookData.headers?.['x-forwarded-for'] || webhookData.headers?.['x-real-ip'] || 'unknown'\n}];"
      },
      "id": "process-platform-callback",
      "name": "Process Platform Callback",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [400, 200],
      "credentials": {}
    },
    {
      "parameters": {
        "jsCode": "// Content Status Handler\nconst webhookData = $input.all()[0];\n\nfunction processContentStatusUpdate(data) {\n  const contentId = data.content_id || data.id;\n  const status = data.status || 'unknown';\n  const platform = data.platform || 'unknown';\n  \n  // Map different status types\n  const statusMapping = {\n    // Generation statuses\n    'generating': 'in_progress',\n    'generated': 'completed',\n    'generation_failed': 'failed',\n    \n    // Upload statuses\n    'uploading': 'uploading',\n    'uploaded': 'published',\n    'upload_failed': 'upload_failed',\n    \n    // Processing statuses\n    'processing': 'processing',\n    'processed': 'live',\n    'processing_failed': 'processing_failed',\n    \n    // Moderation statuses\n    'under_review': 'under_review',\n    'approved': 'approved',\n    'rejected': 'rejected',\n    'flagged': 'flagged'\n  };\n  \n  const normalizedStatus = statusMapping[status] || status;\n  \n  return {\n    content_id: contentId,\n    platform: platform,\n    old_status: data.old_status,\n    new_status: normalizedStatus,\n    status_details: data.details || data.message,\n    error_code: data.error_code,\n    error_message: data.error_message,\n    progress_percentage: data.progress || null,\n    estimated_completion: data.estimated_completion,\n    metadata: {\n      upload_url: data.upload_url,\n      thumbnail_url: data.thumbnail_url,\n      duration: data.duration,\n      file_size: data.file_size,\n      resolution: data.resolution,\n      format: data.format\n    },\n    updated_at: new Date().toISOString()\n  };\n}\n\nconst processedData = processContentStatusUpdate(webhookData.body);\n\nreturn [{\n  ...processedData,\n  webhook_id: webhookData.headers?.['x-webhook-id'] || `status_${Date.now()}`,\n  received_at: new Date().toISOString()\n}];"
      },
      "id": "process-content-status",
      "name": "Process Content Status",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [400, 400],
      "credentials": {}
    },
    {
      "parameters": {
        "jsCode": "// Analytics Update Handler\nconst webhookData = $input.all()[0];\n\nfunction processAnalyticsUpdate(data) {\n  const platform = data.platform || 'unknown';\n  const contentId = data.content_id || data.video_id || data.post_id || data.media_id;\n  \n  // Normalize analytics data across platforms\n  const normalizedMetrics = {\n    content_id: contentId,\n    platform: platform,\n    timestamp: data.timestamp || new Date().toISOString(),\n    metrics: {\n      views: data.views || data.view_count || data.impressions || 0,\n      likes: data.likes || data.like_count || data.reactions || 0,\n      dislikes: data.dislikes || data.dislike_count || 0,\n      comments: data.comments || data.comment_count || data.comments_count || 0,\n      shares: data.shares || data.share_count || data.shares_count || 0,\n      saves: data.saves || data.save_count || 0,\n      \n      // Engagement metrics\n      watch_time: data.watch_time || data.average_watch_time || 0,\n      completion_rate: data.completion_rate || 0,\n      click_through_rate: data.ctr || data.click_through_rate || 0,\n      engagement_rate: data.engagement_rate || 0,\n      \n      // Demographic data\n      demographics: data.demographics || {},\n      geographic_data: data.geography || data.countries || {},\n      device_data: data.devices || {},\n      \n      // Revenue metrics\n      revenue: data.revenue || data.estimated_earnings || 0,\n      ad_revenue: data.ad_revenue || 0,\n      subscriber_gained: data.subscribers_gained || 0,\n      subscriber_lost: data.subscribers_lost || 0\n    },\n    \n    // Platform-specific data\n    platform_data: {\n      youtube: data.youtube_specific || {},\n      tiktok: data.tiktok_specific || {},\n      instagram: data.instagram_specific || {},\n      facebook: data.facebook_specific || {}\n    },\n    \n    // Performance indicators\n    performance_score: calculatePerformanceScore(data),\n    trending_score: data.trending_score || 0,\n    viral_potential: data.viral_potential || 0\n  };\n  \n  return normalizedMetrics;\n}\n\nfunction calculatePerformanceScore(data) {\n  const views = data.views || 0;\n  const likes = data.likes || 0;\n  const comments = data.comments || 0;\n  const shares = data.shares || 0;\n  \n  // Simple performance scoring algorithm\n  let score = 0;\n  \n  // View-based scoring\n  if (views > 100000) score += 30;\n  else if (views > 10000) score += 20;\n  else if (views > 1000) score += 10;\n  else if (views > 100) score += 5;\n  \n  // Engagement-based scoring\n  const engagementRate = views > 0 ? ((likes + comments + shares) / views) * 100 : 0;\n  if (engagementRate > 5) score += 25;\n  else if (engagementRate > 2) score += 15;\n  else if (engagementRate > 1) score += 10;\n  else if (engagementRate > 0.5) score += 5;\n  \n  // Time-based bonus (recent content gets bonus)\n  const contentAge = data.published_hours_ago || 0;\n  if (contentAge < 24) score += 15;\n  else if (contentAge < 168) score += 10; // 1 week\n  else if (contentAge < 720) score += 5; // 1 month\n  \n  return Math.min(score, 100); // Cap at 100\n}\n\nconst processedData = processAnalyticsUpdate(webhookData.body);\n\nreturn [{\n  ...processedData,\n  webhook_id: webhookData.headers?.['x-webhook-id'] || `analytics_${Date.now()}`,\n  received_at: new Date().toISOString()\n}];"
      },
      "id": "process-analytics-update",
      "name": "Process Analytics Update",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [400, 600],
      "credentials": {}
    },
    {
      "parameters": {
        "jsCode": "// User Action Handler\nconst webhookData = $input.all()[0];\n\nfunction processUserAction(data) {\n  const userId = data.user_id;\n  const action = data.action || data.event_type;\n  const sessionId = data.session_id;\n  \n  // Map different action types\n  const actionTypes = {\n    // Content actions\n    'content_generated': 'content_creation',\n    'content_published': 'content_publishing',\n    'content_deleted': 'content_management',\n    'content_edited': 'content_editing',\n    \n    // Platform actions\n    'platform_connected': 'platform_integration',\n    'platform_disconnected': 'platform_integration',\n    'platform_auth_refreshed': 'platform_maintenance',\n    \n    // User actions\n    'user_logged_in': 'authentication',\n    'user_logged_out': 'authentication',\n    'user_registered': 'user_management',\n    'user_profile_updated': 'user_management',\n    \n    // Settings actions\n    'settings_updated': 'configuration',\n    'preferences_changed': 'personalization',\n    'notification_settings_updated': 'configuration',\n    \n    // Analytics actions\n    'dashboard_viewed': 'analytics_engagement',\n    'report_generated': 'analytics_usage',\n    'export_requested': 'data_export',\n    \n    // Billing actions\n    'subscription_upgraded': 'billing',\n    'subscription_downgraded': 'billing',\n    'payment_processed': 'billing',\n    'payment_failed': 'billing'\n  };\n  \n  const actionCategory = actionTypes[action] || 'unknown';\n  \n  return {\n    user_id: userId,\n    session_id: sessionId,\n    action: action,\n    action_category: actionCategory,\n    details: data.details || {},\n    metadata: {\n      ip_address: data.ip_address,\n      user_agent: data.user_agent,\n      referrer: data.referrer,\n      page_url: data.page_url,\n      device_type: data.device_type,\n      browser: data.browser,\n      os: data.os\n    },\n    timestamp: data.timestamp || new Date().toISOString(),\n    \n    // Track for analytics\n    track_analytics: true,\n    \n    // Determine if action needs notification\n    requires_notification: [\n      'subscription_upgraded',\n      'subscription_downgraded',\n      'payment_failed',\n      'platform_disconnected'\n    ].includes(action)\n  };\n}\n\nconst processedData = processUserAction(webhookData.body);\n\nreturn [{\n  ...processedData,\n  webhook_id: webhookData.headers?.['x-webhook-id'] || `user_action_${Date.now()}`,\n  received_at: new Date().toISOString()\n}];"
      },
      "id": "process-user-action",
      "name": "Process User Action",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [400, 800],
      "credentials": {}
    },
    {
      "parameters": {
        "operation": "insert",
        "schema": {
          "value": "public"
        },
        "table": {
          "value": "uploads"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "content_id": "={{ $json.video_id || $json.media_id || $json.post_id }}",
            "platform": "={{ $json.platform }}",
            "platform_id": "={{ $json.video_id || $json.media_id || $json.post_id }}",
            "url": "={{ $json.share_url || $json.permalink || $json.upload_url }}",
            "metadata": "={{ JSON.stringify($json) }}",
            "status": "={{ $json.status || 'published' }}",
            "uploaded_at": "NOW()"
          },
          "matchingColumns": [
            {
              "column": "platform_id",
              "property": "video_id"
            }
          ],
          "schema": []
        },
        "additionalFields": {}
      },
      "id": "update-upload-record",
      "name": "Update Upload Record",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.4,
      "position": [600, 200],
      "credentials": {
        "postgres": {
          "id": "postgres-main",
          "name": "PostgreSQL Main Database"
        }
      }
    },
    {
      "parameters": {
        "operation": "update",
        "schema": {
          "value": "public"
        },
        "table": {
          "value": "content_items"
        },
        "updateKey": {
          "value": "id"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "status": "={{ $json.new_status }}",
            "progress_percentage": "={{ $json.progress_percentage }}",
            "error_message": "={{ $json.error_message }}",
            "metadata": "=JSON_SET(COALESCE(metadata, '{}'), '$.status_details', JSON_OBJECT('last_update', '{{ $json.updated_at }}', 'details', '{{ $json.status_details }}'))",
            "updated_at": "NOW()"
          },
          "matchingColumns": [
            {
              "column": "id",
              "property": "content_id"
            }
          ],
          "schema": []
        },
        "additionalFields": {}
      },
      "id": "update-content-status",
      "name": "Update Content Status",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.4,
      "position": [600, 400],
      "credentials": {
        "postgres": {
          "id": "postgres-main",
          "name": "PostgreSQL Main Database"
        }
      }
    },
    {
      "parameters": {
        "operation": "insert",
        "schema": {
          "value": "public"
        },
        "table": {
          "value": "performance_metrics"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "upload_id": "=(SELECT id FROM uploads WHERE platform_id = '{{ $json.content_id }}' AND platform = '{{ $json.platform }}' LIMIT 1)",
            "views": "={{ $json.metrics.views }}",
            "likes": "={{ $json.metrics.likes }}",
            "comments": "={{ $json.metrics.comments }}",
            "shares": "={{ $json.metrics.shares }}",
            "revenue": "={{ $json.metrics.revenue }}",
            "engagement_rate": "={{ $json.metrics.engagement_rate }}",
            "performance_score": "={{ $json.performance_score }}",
            "measured_at": "NOW()",
            "raw_metrics": "={{ JSON.stringify($json.metrics) }}"
          },
          "matchingColumns": [],
          "schema": []
        },
        "additionalFields": {}
      },
      "id": "store-analytics-data",
      "name": "Store Analytics Data",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.4,
      "position": [600, 600],
      "credentials": {
        "postgres": {
          "id": "postgres-main",
          "name": "PostgreSQL Main Database"
        }
      }
    },
    {
      "parameters": {
        "operation": "insert",
        "schema": {
          "value": "public"
        },
        "table": {
          "value": "user_actions"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "user_id": "={{ $json.user_id }}",
            "session_id": "={{ $json.session_id }}",
            "action": "={{ $json.action }}",
            "action_category": "={{ $json.action_category }}",
            "details": "={{ JSON.stringify($json.details) }}",
            "metadata": "={{ JSON.stringify($json.metadata) }}",
            "created_at": "NOW()"
          },
          "matchingColumns": [],
          "schema": []
        },
        "additionalFields": {}
      },
      "id": "log-user-action",
      "name": "Log User Action",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.4,
      "position": [600, 800],
      "credentials": {
        "postgres": {
          "id": "postgres-main",
          "name": "PostgreSQL Main Database"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "high-performance",
              "leftValue": "={{ $json.performance_score }}",
              "rightValue": 80,
              "operator": {
                "type": "number",
                "operation": "gte",
                "rightType": "number"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "check-high-performance",
      "name": "Check High Performance",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [800, 600]
    },
    {
      "parameters": {
        "url": "={{ $env.SLACK_WEBHOOK_URL }}",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"text\": \"ðŸš€ High-Performing Content Alert!\",\n  \"attachments\": [\n    {\n      \"color\": \"good\",\n      \"fields\": [\n        {\n          \"title\": \"Content ID\",\n          \"value\": \"{{ $json.content_id }}\",\n          \"short\": true\n        },\n        {\n          \"title\": \"Platform\",\n          \"value\": \"{{ $json.platform }}\",\n          \"short\": true\n        },\n        {\n          \"title\": \"Performance Score\",\n          \"value\": \"{{ $json.performance_score }}/100\",\n          \"short\": true\n        },\n        {\n          \"title\": \"Views\",\n          \"value\": \"{{ $json.metrics.views.toLocaleString() }}\",\n          \"short\": true\n        },\n        {\n          \"title\": \"Engagement Rate\",\n          \"value\": \"{{ $json.metrics.engagement_rate }}%\",\n          \"short\": true\n        },\n        {\n          \"title\": \"Revenue\",\n          \"value\": \"${{ $json.metrics.revenue }}\",\n          \"short\": true\n        }\n      ]\n    }\n  ]\n}",
        "options": {}
      },
      "id": "high-performance-notification",
      "name": "High Performance Notification",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [1000, 550],
      "credentials": {}
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "requires-notification",
              "leftValue": "={{ $json.requires_notification }}",
              "rightValue": true,
              "operator": {
                "type": "boolean",
                "operation": "equal",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "check-notification-required",
      "name": "Check Notification Required",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [800, 800]
    },
    {
      "parameters": {
        "url": "http://web-dashboard:3000/api/notifications/send",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"user_id\": \"{{ $json.user_id }}\",\n  \"type\": \"{{ $json.action_category }}\",\n  \"title\": \"{{ $json.action === 'subscription_upgraded' ? 'Subscription Upgraded!' : $json.action === 'payment_failed' ? 'Payment Failed' : $json.action === 'platform_disconnected' ? 'Platform Disconnected' : 'Action Completed' }}\",\n  \"message\": \"{{ $json.action === 'subscription_upgraded' ? 'Your subscription has been successfully upgraded.' : $json.action === 'payment_failed' ? 'Your payment could not be processed. Please update your payment method.' : $json.action === 'platform_disconnected' ? 'A platform connection has been disconnected.' : 'Your action has been completed successfully.' }}\",\n  \"action_url\": \"{{ $json.action === 'payment_failed' ? '/settings/billing' : $json.action === 'platform_disconnected' ? '/settings/platforms' : '/dashboard' }}\",\n  \"priority\": \"{{ $json.action === 'payment_failed' ? 'high' : 'normal' }}\"\n}",
        "options": {}
      },
      "id": "send-user-notification",
      "name": "Send User Notification",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [1000, 800],
      "credentials": {}
    },
    {
      "parameters": {
        "operation": "set",
        "key": "webhook_metrics",
        "value": "={{ JSON.stringify({\n  total_webhooks_processed: ($json.total_webhooks_processed || 0) + 1,\n  platform_callbacks: ($json.platform_callbacks || 0) + ($json.platform ? 1 : 0),\n  content_status_updates: ($json.content_status_updates || 0) + ($json.content_id ? 1 : 0),\n  analytics_updates: ($json.analytics_updates || 0) + ($json.metrics ? 1 : 0),\n  user_actions: ($json.user_actions || 0) + ($json.user_id ? 1 : 0),\n  last_processed: new Date().toISOString()\n}) }}",
        "ttl": 86400
      },
      "id": "update-webhook-metrics",
      "name": "Update Webhook Metrics",
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [800, 1000],
      "credentials": {
        "redis": {
          "id": "redis-main",
          "name": "Redis Main Cache"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "status-failed",
              "leftValue": "={{ $json.new_status }}",
              "rightValue": "failed",
              "operator": {
                "type": "string",
                "operation": "contains"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "check-failed-status",
      "name": "Check Failed Status",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [800, 400]
    },
    {
      "parameters": {
        "url": "={{ $env.ERROR_HANDLING_WEBHOOK_URL }}",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"service\": \"content-generation\",\n  \"workflow\": \"webhook-handlers\",\n  \"message\": \"Content {{ $json.content_id }} failed with status: {{ $json.new_status }}\",\n  \"error_code\": \"{{ $json.error_code }}\",\n  \"error_message\": \"{{ $json.error_message }}\",\n  \"content_id\": \"{{ $json.content_id }}\",\n  \"platform\": \"{{ $json.platform }}\",\n  \"severity\": \"medium\",\n  \"metadata\": {\n    \"old_status\": \"{{ $json.old_status }}\",\n    \"new_status\": \"{{ $json.new_status }}\",\n    \"status_details\": \"{{ $json.status_details }}\"\n  }\n}",
        "options": {}
      },
      "id": "report-failed-content",
      "name": "Report Failed Content",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [1000, 400],
      "credentials": {}
    },
    {
      "parameters": {
        "url": "http://web-dashboard:3000/api/realtime/broadcast",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"event\": \"platform_update\",\n  \"data\": {\n    \"content_id\": \"{{ $json.video_id || $json.media_id || $json.post_id }}\",\n    \"platform\": \"{{ $json.platform }}\",\n    \"event_type\": \"{{ $json.event_type }}\",\n    \"status\": \"{{ $json.status }}\",\n    \"metrics\": {\n      \"views\": {{ $json.view_count || 0 }},\n      \"likes\": {{ $json.like_count || $json.likes || 0 }},\n      \"comments\": {{ $json.comment_count || $json.comments || 0 }},\n      \"shares\": {{ $json.share_count || $json.shares || 0 }}\n    },\n    \"timestamp\": \"{{ $json.received_at }}\"\n  },\n  \"room\": \"dashboard_updates\"\n}",
        "options": {}
      },
      "id": "broadcast-realtime-update",
      "name": "Broadcast Realtime Update",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [800, 200],
      "credentials": {}
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "viral-potential",
              "leftValue": "={{ $json.viral_potential }}",
              "rightValue": 70,
              "operator": {
                "type": "number",
                "operation": "gte",
                "rightType": "number"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "check-viral-potential",
      "name": "Check Viral Potential",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [800, 650]
    },
    {
      "parameters": {
        "url": "http://content-engine:5000/api/optimization/viral-boost",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"content_id\": \"{{ $json.content_id }}\",\n  \"platform\": \"{{ $json.platform }}\",\n  \"viral_score\": {{ $json.viral_potential }},\n  \"current_metrics\": {{ JSON.stringify($json.metrics) }},\n  \"boost_actions\": [\n    \"increase_posting_frequency\",\n    \"cross_platform_promotion\",\n    \"influencer_outreach\",\n    \"paid_promotion_suggestion\"\n  ]\n}",
        "options": {}
      },
      "id": "trigger-viral-boost",
      "name": "Trigger Viral Boost",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [1000, 650],
      "credentials": {}
    }
  ],
  "pinData": {},
  "connections": {
    "Platform Callback Webhook": {
      "main": [
        [
          {
            "node": "Process Platform Callback",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Content Status Webhook": {
      "main": [
        [
          {
            "node": "Process Content Status",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Analytics Update Webhook": {
      "main": [
        [
          {
            "node": "Process Analytics Update",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "User Action Webhook": {
      "main": [
        [
          {
            "node": "Process User Action",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Process Platform Callback": {
      "main": [
        [
          {
            "node": "Update Upload Record",
            "type": "main",
            "index": 0
          },
          {
            "node": "Broadcast Realtime Update",
            "type": "main",
            "index": 0
          },
          {
            "node": "Update Webhook Metrics",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Process Content Status": {
      "main": [
        [
          {
            "node": "Update Content Status",
            "type": "main",
            "index": 0
          },
          {
            "node": "Check Failed Status",
            "type": "main",
            "index": 0
          },
          {
            "node": "Update Webhook Metrics",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Process Analytics Update": {
      "main": [
        [
          {
            "node": "Store Analytics Data",
            "type": "main",
            "index": 0
          },
          {
            "node": "Check High Performance",
            "type": "main",
            "index": 0
          },
          {
            "node": "Check Viral Potential",
            "type": "main",
            "index": 0
          },
          {
            "node": "Update Webhook Metrics",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Process User Action": {
      "main": [
        [
          {
            "node": "Log User Action",
            "type": "main",
            "index": 0
          },
          {
            "node": "Check Notification Required",
            "type": "main",
            "index": 0
          },
          {
            "node": "Update Webhook Metrics",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check High Performance": {
      "main": [
        [
          {
            "node": "High Performance Notification",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check Notification Required": {
      "main": [
        [
          {
            "node": "Send User Notification",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check Failed Status": {
      "main": [
        [
          {
            "node": "Report Failed Content",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check Viral Potential": {
      "main": [
        [
          {
            "node": "Trigger Viral Boost",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {
    "executionOrder": "v1",
    "saveManualExecutions": true,
    "callerPolicy": "workflowsFromSameOwner"
  },
  "versionId": "1.0.0",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "ai-content-factory"
  },
  "id": "webhook-handlers-workflow",
  "tags": [
    {
      "createdAt": "2024-01-15T00:00:00.000Z",
      "updatedAt": "2024-01-15T00:00:00.000Z",
      "id": "webhooks",
      "name": "webhooks"
    },
    {
      "createdAt": "2024-01-15T00:00:00.000Z",
      "updatedAt": "2024-01-15T00:00:00.000Z",
      "id": "integration",
      "name": "integration"
    },
    {
      "createdAt": "2024-01-15T00:00:00.000Z",
      "updatedAt": "2024-01-15T00:00:00.000Z",
      "id": "realtime",
      "name": "realtime"
    }
  ],
  "triggerCount": 4,
  "updatedAt": "2024-01-15T12:00:00.000Z",
  "createdAt": "2024-01-15T12:00:00.000Z"
}