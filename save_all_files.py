# save_all_files.py - ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
import os

def save_file(filepath, content):
    """‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏•‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á directory ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ"""
    directory = os.path.dirname(filepath)
    if directory:
        os.makedirs(directory, exist_ok=True)
    
    with open(filepath, 'w', encoding='utf-8') as f:
        f.write(content)
    print(f"‚úÖ Saved: {filepath}")

# 1. fix_groq_service.py
fix_groq_content = '''# fix_groq_service.py - ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï Groq service ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ model ‡πÉ‡∏´‡∏°‡πà
import os
import json
from groq import Groq

def check_available_models():
    """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö models ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ‡πÉ‡∏ô Groq"""
    try:
        client = Groq(api_key=os.getenv('GROQ_API_KEY'))
        models = client.models.list()
        
        print("üìã Available Groq Models:")
        for model in models.data:
            print(f"  - {model.id}")
        
        return [model.id for model in models.data]
    
    except Exception as e:
        print(f"‚ùå Error checking models: {e}")
        return []

def create_updated_groq_service():
    """‡∏™‡∏£‡πâ‡∏≤‡∏á Groq service ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ model ‡πÉ‡∏´‡∏°‡πà"""
    content = """# content-engine/ai_services/text_ai/groq_service.py
import os
import json
import asyncio
from groq import Groq
from .base_text_ai import BaseTextAI
from dotenv import load_dotenv

load_dotenv()

class GroqService(BaseTextAI):
    def __init__(self):
        self.client = Groq(api_key=os.getenv('GROQ_API_KEY'))
        # ‡πÉ‡∏ä‡πâ model ‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ
        self.available_models = [
            "llama-3.3-70b-versatile",
            "llama-3.1-70b-versatile", 
            "llama-3.1-8b-instant",
            "mixtral-8x7b-32768",
            "gemma2-9b-it",
            "gemma-7b-it"
        ]
        self.model = None
    
    def test_model(self):
        \"\"\"‡∏ó‡∏î‡∏™‡∏≠‡∏ö model ‡∏ß‡πà‡∏≤‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ‡πÑ‡∏´‡∏°\"\"\"
        for model in self.available_models:
            try:
                response = self.client.chat.completions.create(
                    model=model,
                    messages=[{"role": "user", "content": "Hello, test message"}],
                    max_tokens=10
                )
                self.model = model
                print(f"‚úÖ Using model: {model}")
                return True
            except Exception as e:
                print(f"‚ùå Model {model} failed: {str(e)[:50]}...")
                continue
        return False
    
    async def analyze_trend(self, trend_data: dict) -> dict:
        \"\"\"‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå trend ‡∏à‡∏£‡∏¥‡∏á‡∏î‡πâ‡∏ß‡∏¢ Groq AI\"\"\"
        # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö model ‡∏Å‡πà‡∏≠‡∏ô
        if not self.model and not self.test_model():
            print("‚ö†Ô∏è No working models found, using fallback data")
            return self._get_fallback_analysis()
        
        prompt = f\"\"\"
‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå trending topic ‡∏ô‡∏µ‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤:

‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠: {trend_data.get('topic', '')}
‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡∏¥‡∏¢‡∏°: {trend_data.get('popularity_score', 0)}
‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡πÄ‡∏ï‡∏¥‡∏ö‡πÇ‡∏ï: {trend_data.get('growth_rate', 0)}

‡πÉ‡∏´‡πâ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô 1-10 ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö:
- viral_potential (‡∏®‡∏±‡∏Å‡∏¢‡∏†‡∏≤‡∏û‡∏Å‡∏≤‡∏£‡πÅ‡∏û‡∏£‡πà‡∏Å‡∏£‡∏∞‡∏à‡∏≤‡∏¢)
- content_saturation (‡∏Ñ‡∏ß‡∏≤‡∏°‡∏≠‡∏¥‡πà‡∏°‡∏ï‡∏±‡∏ß‡∏Ç‡∏≠‡∏á‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤) 
- audience_interest (‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏ô‡πÉ‡∏à‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡∏ä‡∏°)
- monetization_opportunity (‡πÇ‡∏≠‡∏Å‡∏≤‡∏™‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ)

‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥ 3 ‡∏°‡∏∏‡∏°‡∏°‡∏≠‡∏á‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ã‡πâ‡∏≥‡πÉ‡∏Ñ‡∏£

‡∏ï‡∏≠‡∏ö‡πÄ‡∏õ‡πá‡∏ô JSON ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô:
{{
    "scores": {{
        "viral_potential": 8,
        "content_saturation": 3,
        "audience_interest": 9,
        "monetization_opportunity": 7
    }},
    "content_angles": [
        "‡∏°‡∏∏‡∏°‡∏°‡∏≠‡∏á‡∏ó‡∏µ‡πà 1",
        "‡∏°‡∏∏‡∏°‡∏°‡∏≠‡∏á‡∏ó‡∏µ‡πà 2", 
        "‡∏°‡∏∏‡∏°‡∏°‡∏≠‡∏á‡∏ó‡∏µ‡πà 3"
    ],
    "recommended_platforms": ["youtube", "tiktok"],
    "estimated_reach": 50000
}}
        \"\"\"
        
        try:
            response = self.client.chat.completions.create(
                model=self.model,
                messages=[
                    {"role": "system", "content": "‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏õ‡πá‡∏ô‡∏ú‡∏π‡πâ‡πÄ‡∏ä‡∏µ‡πà‡∏¢‡∏ß‡∏ä‡∏≤‡∏ç‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÄ‡∏ó‡∏£‡∏ô‡∏î‡πå ‡∏ï‡∏≠‡∏ö‡πÄ‡∏õ‡πá‡∏ô JSON ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô"},
                    {"role": "user", "content": prompt}
                ],
                temperature=0.7,
                max_tokens=800
            )
            
            content = response.choices[0].message.content
            # ‡∏•‡∏≠‡∏á‡πÅ‡∏¢‡∏Å JSON ‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
            if '{' in content:
                json_start = content.find('{')
                json_end = content.rfind('}') + 1
                json_str = content[json_start:json_end]
                result = json.loads(json_str)
                print(f"‚úÖ Groq analysis successful with {self.model}")
                return result
            else:
                raise ValueError("No JSON found in response")
            
        except Exception as e:
            print(f"‚ùå Groq API Error: {e}")
            return self._get_fallback_analysis()
    
    async def generate_content_script(self, idea: str, platform: str = "youtube") -> dict:
        \"\"\"‡∏™‡∏£‡πâ‡∏≤‡∏á script ‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏à‡∏£‡∏¥‡∏á‡∏î‡πâ‡∏ß‡∏¢ Groq\"\"\"
        if not self.model and not self.test_model():
            return self._get_fallback_script(idea)
        
        prompt = f\"\"\"
‡∏™‡∏£‡πâ‡∏≤‡∏á script ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤: {idea}
Platform: {platform}

‡∏™‡∏£‡πâ‡∏≤‡∏á script ‡∏ó‡∏µ‡πà‡∏°‡∏µ:
1. Hook (3 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ‡πÅ‡∏£‡∏Å) - ‡∏î‡∏∂‡∏á‡∏î‡∏π‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏ô‡πÉ‡∏à
2. ‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏´‡∏•‡∏±‡∏Å - ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏ä‡∏ô‡πå
3. Call-to-action - ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏ó‡∏≥

‡∏ï‡∏≠‡∏ö‡πÄ‡∏õ‡πá‡∏ô JSON ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô:
{{
    "title": "‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡∏ó‡∏µ‡πà‡∏î‡∏∂‡∏á‡∏î‡∏π‡∏î",
    "description": "‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏™‡∏±‡πâ‡∏ô",
    "script": {{
        "hook": "3 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ‡πÅ‡∏£‡∏Å",
        "main_content": "‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏´‡∏•‡∏±‡∏Å",
        "cta": "call to action"
    }},
    "hashtags": ["#tag1", "#tag2"],
    "estimated_duration": "60 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ"
}}
        \"\"\"
        
        try:
            response = self.client.chat.completions.create(
                model=self.model,
                messages=[
                    {"role": "system", "content": "‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏õ‡πá‡∏ô‡∏ô‡∏±‡∏Å‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô script ‡∏°‡∏∑‡∏≠‡∏≠‡∏≤‡∏ä‡∏µ‡∏û ‡∏ï‡∏≠‡∏ö‡πÄ‡∏õ‡πá‡∏ô JSON ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô"},
                    {"role": "user", "content": prompt}
                ],
                temperature=0.8,
                max_tokens=1000
            )
            
            content = response.choices[0].message.content
            if '{' in content:
                json_start = content.find('{')
                json_end = content.rfind('}') + 1
                json_str = content[json_start:json_end]
                result = json.loads(json_str)
                print(f"‚úÖ Script generated with {self.model}")
                return result
            else:
                raise ValueError("No JSON in response")
            
        except Exception as e:
            print(f"‚ùå Groq Script Error: {e}")
            return self._get_fallback_script(idea)
    
    def _get_fallback_analysis(self):
        \"\"\"‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• fallback ‡πÄ‡∏°‡∏∑‡πà‡∏≠ AI ‡πÑ‡∏°‡πà‡∏ó‡∏≥‡∏á‡∏≤‡∏ô\"\"\"
        return {
            "scores": {
                "viral_potential": 6, 
                "content_saturation": 4, 
                "audience_interest": 7, 
                "monetization_opportunity": 6
            },
            "content_angles": [
                "‡∏°‡∏∏‡∏°‡∏°‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏ô‡πà‡∏≤‡∏™‡∏ô‡πÉ‡∏à", 
                "‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡∏°‡πà‡πÜ", 
                "‡πÄ‡∏Ñ‡∏•‡πá‡∏î‡∏•‡∏±‡∏ö‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÄ‡∏Ñ‡∏¢‡∏£‡∏π‡πâ"
            ],
            "recommended_platforms": ["youtube", "tiktok"],
            "estimated_reach": 15000
        }
    
    def _get_fallback_script(self, idea):
        \"\"\"Script fallback\"\"\"
        return {
            "title": f"‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö {idea}",
            "description": "‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏ó‡∏µ‡πà‡∏ô‡πà‡∏≤‡∏™‡∏ô‡πÉ‡∏à‡πÅ‡∏•‡∏∞‡∏°‡∏µ‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏ä‡∏ô‡πå",
            "script": {
                "hook": "‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏Ñ‡∏£‡∏±‡∏ö! ‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡πÄ‡∏£‡∏≤‡∏°‡∏≤‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏ô‡πà‡∏≤‡∏™‡∏ô‡πÉ‡∏à‡∏Å‡∏±‡∏ô",
                "main_content": f"‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á {idea} ‡∏ô‡∏±‡πâ‡∏ô‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏°‡∏≤‡∏Å‡πÄ‡∏û‡∏£‡∏≤‡∏∞...",
                "cta": "‡∏ñ‡πâ‡∏≤‡∏ä‡∏≠‡∏ö‡∏Å‡πá‡∏Å‡∏î Like ‡πÅ‡∏•‡∏∞ Subscribe ‡∏ô‡∏∞‡∏Ñ‡∏£‡∏±‡∏ö"
            },
            "hashtags": ["#content", "#viral", "#educational"],
            "estimated_duration": "2-3 ‡∏ô‡∏≤‡∏ó‡∏µ"
        }
"""
    
    with open('content-engine/ai_services/text_ai/groq_service.py', 'w', encoding='utf-8') as f:
        f.write(content)
    print("‚úÖ Updated: groq_service.py")

if __name__ == "__main__":
    from dotenv import load_dotenv
    load_dotenv()
    
    print("üîß ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç Groq Service...")
    create_updated_groq_service()
    
    print("\\nüîç ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö models ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ...")
    check_available_models()
    
    print("\\nüìù ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ï‡πà‡∏≠‡πÑ‡∏õ:")
    print("1. python test_ai_integration.py")
    print("2. python main.py")
'''

# 2. create_ai_files.py - ‡πÑ‡∏ü‡∏•‡πå‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á
create_ai_files_content = '''# create_ai_files.py - ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
import os

def create_directories():
    """‡∏™‡∏£‡πâ‡∏≤‡∏á directories ‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô"""
    dirs = [
        'content-engine',
        'content-engine/services',
        'content-engine/ai_services',
        'content-engine/ai_services/text_ai',
        'content-engine/ai_services/image_ai',
        'content-engine/ai_services/audio_ai',
        'content-engine/models',
        'templates'
    ]
    
    for dir_path in dirs:
        os.makedirs(dir_path, exist_ok=True)
        print(f"‚úÖ Created: {dir_path}")

def create_init_files():
    """‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå __init__.py"""
    init_files = [
        'content-engine/__init__.py',
        'content-engine/services/__init__.py',
        'content-engine/ai_services/__init__.py',
        'content-engine/ai_services/text_ai/__init__.py',
        'content-engine/ai_services/image_ai/__init__.py',
        'content-engine/ai_services/audio_ai/__init__.py',
        'content-engine/models/__init__.py'
    ]
    
    for file_path in init_files:
        with open(file_path, 'w') as f:
            f.write('# Package initialization\\n')
        print(f"‚úÖ Created: {file_path}")

def create_base_text_ai():
    """‡∏™‡∏£‡πâ‡∏≤‡∏á base class ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö text AI"""
    content = """# content-engine/ai_services/text_ai/base_text_ai.py
from abc import ABC, abstractmethod
from typing import Dict, Any

class BaseTextAI(ABC):
    \"\"\"Base class ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Text AI services\"\"\"
    
    @abstractmethod
    async def analyze_trend(self, trend_data: Dict[str, Any]) -> Dict[str, Any]:
        \"\"\"‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå trend ‡πÅ‡∏•‡∏∞‡πÉ‡∏´‡πâ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô\"\"\"
        pass
    
    @abstractmethod
    async def generate_content_script(self, idea: str, platform: str = "youtube") -> Dict[str, Any]:
        \"\"\"‡∏™‡∏£‡πâ‡∏≤‡∏á script ‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤\"\"\"
        pass
"""
    
    with open('content-engine/ai_services/text_ai/base_text_ai.py', 'w', encoding='utf-8') as f:
        f.write(content)
    print("‚úÖ Created: base_text_ai.py")

if __name__ == "__main__":
    print("üöÄ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö AI Integration...")
    
    create_directories()
    create_init_files() 
    create_base_text_ai()
    
    print("\\n‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô!")
    print("\\nüìù ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ï‡πà‡∏≠‡πÑ‡∏õ:")
    print("1. python fix_groq_service.py")
    print("2. python test_ai_integration.py")
    print("3. python main.py")
'''

if __name__ == "__main__":
    print("üíæ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î...")
    
    save_file('fix_groq_service.py', fix_groq_content)
    save_file('create_ai_files.py', create_ai_files_content)
    
    print("\\n‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô!")
    print("\\nüìù ‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏ô:")
    print("1. python create_ai_files.py")
    print("2. python fix_groq_service.py") 
    print("3. python test_ai_integration.py")
    print("4. python main.py")